name: Fast Tests (80/20 Optimization)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  fast-tests:
    name: Fast Test Suite (<1s execution)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Run fast test suite
        run: |
          # Set environment to use mock backend for speed
          export USE_MOCK_BACKEND=1
          export SKIP_SLOW_TESTS=1

          # Run only critical tests that use mock backend (<1s total)
          cargo test --lib --bins --all-features \
            test_container_isolation_core_functionality \
            test_template_rendering \
            test_config_validation \
            test_mock_backend_creation \
            test_mock_backend_echo_command \
            -- --test-threads=8

      - name: Run core template tests
        run: |
          export USE_MOCK_BACKEND=1
          cargo test --lib template:: -- --test-threads=8

      - name: Run core config tests
        run: |
          export USE_MOCK_BACKEND=1
          cargo test --lib config:: -- --test-threads=8

  # Optional: Full integration tests (runs separately, much slower)
  slow-integration:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: fast-tests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run full integration suite
        run: |
          export RUN_INTEGRATION_TESTS=1
          export USE_REAL_CONTAINERS=1
          cargo test --lib --bins --all-features
