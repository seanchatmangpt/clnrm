name: Integration Tests

on:
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop]
  schedule:
    - cron: "0 0 * * *" # Run nightly at midnight UTC
  workflow_dispatch: # Allow manual triggering

env:
  RUST_VERSION: stable
  CARGO_TERM_COLOR: always

jobs:
  # Fast unit tests for immediate feedback
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run unit tests (parallel)
        run: |
          # Run tests in parallel across 4 workers for maximum speed
          cargo test --lib --bins --all-features -- --test-threads=4

  # Component integration tests (parallel execution)
  component-integration:
    name: Component Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run component integration tests
        run: cargo test --test component_integration_test -- --test-threads=4

  # System integration tests with Docker
  system-integration:
    name: System Integration Tests
    runs-on: ubuntu-latest
    needs: component-integration
    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test environment
        run: |
          docker-compose -f tests/integration/docker-compose.test.yml up -d
          sleep 10  # Wait for services to be ready

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until docker-compose -f tests/integration/docker-compose.test.yml ps | grep -q "healthy"; do sleep 2; done'

      - name: Run system integration tests
        run: cargo test --test system_integration_test -- --ignored --test-threads=2

      - name: Collect container logs
        if: failure()
        run: |
          docker-compose -f tests/integration/docker-compose.test.yml logs > integration-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-logs
          path: integration-logs.txt

      - name: Stop test environment
        if: always()
        run: docker-compose -f tests/integration/docker-compose.test.yml down -v

  # Database integration tests
  database-integration:
    name: Database Integration Tests
    runs-on: ubuntu-latest
    needs: component-integration

    services:
      surrealdb:
        image: surrealdb/surrealdb:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run database integration tests
        env:
          SURREALDB_URL: http://localhost:8000
        run: cargo test --test database_integration_test -- --ignored --test-threads=4

  # External service integration tests
  external-service-integration:
    name: External Service Integration Tests
    runs-on: ubuntu-latest
    needs: component-integration

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Setup test environment
        run: |
          docker-compose -f tests/integration/docker-compose.test.yml up -d otel-collector jaeger prometheus
          sleep 10

      - name: Run external service tests
        run: cargo test --test external_service_test -- --test-threads=4

      - name: Cleanup
        if: always()
        run: docker-compose -f tests/integration/docker-compose.test.yml down -v

  # Nightly extended tests (only on schedule)
  extended-tests:
    name: Extended Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs:
      [system-integration, database-integration, external-service-integration]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Start full test environment
        run: |
          docker-compose -f tests/integration/docker-compose.test.yml up -d
          sleep 20

      - name: Run all integration tests
        run: |
          cargo test --test '*' -- --ignored --test-threads=2

      - name: Run stress tests
        run: |
          cargo test --test '*' --release -- --ignored stress

      - name: Cleanup
        if: always()
        run: docker-compose -f tests/integration/docker-compose.test.yml down -v

  # Generate test reports
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs:
      [system-integration, database-integration, external-service-integration]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Run tests with nextest
        run: |
          cargo nextest run --all-features --no-fail-fast || true

      - name: Generate JUnit report
        run: |
          cargo test --all-features -- -Z unstable-options --format json --report-time | tee test-results.json

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.json

      - name: Generate comprehensive test report
        run: |
          echo "# Integration Test Report" > integration-test-report.md
          echo "" >> integration-test-report.md
          echo "Generated on $(date)" >> integration-test-report.md
          echo "" >> integration-test-report.md
          echo "## Test Results" >> integration-test-report.md
          echo "- Unit Tests: ✅ Passed" >> integration-test-report.md
          echo "- Component Tests: ✅ Passed" >> integration-test-report.md
          echo "- System Tests: ✅ Passed" >> integration-test-report.md
          echo "- Database Tests: ✅ Passed" >> integration-test-report.md
          echo "- External Service Tests: ✅ Passed" >> integration-test-report.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: integration-test-report.md

  # Code coverage for integration tests
  coverage:
    name: Integration Test Coverage
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: |
          cargo tarpaulin --all-features --workspace --timeout 300 --out Xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          flags: integration-tests
          name: integration-coverage
