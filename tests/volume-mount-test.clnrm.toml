# Volume Mount Integration Test
#
# This test validates volume mounting functionality in the cleanroom framework.
# It demonstrates:
# - Reading files from host filesystem via mounted volumes
# - Writing files to host filesystem via mounted volumes
# - Multiple volume mounts in a single service
# - Read-only and read-write volume configurations

[test.metadata]
name = "volume_mount_integration_test"
description = "Comprehensive test for volume mounting functionality"
timeout = "120s"

# Service with volume mounts
[services.volume_test_service]
type = "generic_container"
plugin = "generic_container"
image = "alpine:latest"

# Volume configuration - mounting host directories into container
[[services.volume_test_service.volumes]]
host_path = "/tmp/clnrm-test-input"
container_path = "/input"
read_only = true  # Input directory is read-only

[[services.volume_test_service.volumes]]
host_path = "/tmp/clnrm-test-output"
container_path = "/output"
read_only = false  # Output directory is read-write

[[services.volume_test_service.volumes]]
host_path = "/tmp/clnrm-test-config"
container_path = "/config"
read_only = true  # Config directory is read-only

# Test Steps

[[steps]]
name = "verify_input_volume_mounted"
command = ["cat", "/input/test-input.txt"]
expected_output_regex = "Input data from host"
expected_exit_code = 0
service = "volume_test_service"

[[steps]]
name = "verify_config_volume_mounted"
command = ["cat", "/config/test-config.txt"]
expected_output_regex = "Config data from host"
expected_exit_code = 0
service = "volume_test_service"

[[steps]]
name = "list_input_directory"
command = ["ls", "-la", "/input"]
expected_exit_code = 0
service = "volume_test_service"

[[steps]]
name = "write_to_output_volume"
command = ["sh", "-c", "echo 'Output from container' > /output/test-output.txt"]
expected_exit_code = 0
service = "volume_test_service"

[[steps]]
name = "verify_output_written"
command = ["cat", "/output/test-output.txt"]
expected_output_regex = "Output from container"
expected_exit_code = 0
service = "volume_test_service"

[[steps]]
name = "process_input_to_output"
command = ["sh", "-c", "cat /input/test-input.txt /config/test-config.txt > /output/combined.txt"]
expected_exit_code = 0
service = "volume_test_service"

[[steps]]
name = "verify_combined_output"
command = ["cat", "/output/combined.txt"]
expected_output_regex = "Input data from host"
expected_exit_code = 0
service = "volume_test_service"

# Assertions
[assertions]
container_should_have_executed_commands = 7
execution_should_be_hermetic = true
all_steps_should_succeed = true
volumes_should_be_mounted = 3
