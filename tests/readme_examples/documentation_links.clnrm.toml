# README Example Test: Documentation Links
# Verifies: All documentation links are valid and referenced correctly
# Location in README: Lines 201-209, 474-479

[test.metadata]
name = "verify_documentation_links"
description = "Verify all documentation files mentioned in README exist"
version = "1.0.0"

[service.doc_checker]
plugin = "generic_container"
image = "alpine:latest"
working_dir = "/workspace"

[[scenario]]
name = "check_main_documentation_files"
service = "doc_checker"
run = """
# Check v1.0 documentation files from README lines 203-208
test -d /workspace/docs/ && echo "✅ docs/ directory exists" || echo "❌ Missing docs/"
test -f /workspace/docs/PRD-v1.md && echo "✅ PRD-v1.md exists" || echo "⚠️  Missing PRD-v1.md"
test -f /workspace/docs/v1.0/TOML_REFERENCE.md && echo "✅ TOML_REFERENCE.md exists" || echo "⚠️  Missing TOML_REFERENCE.md"
test -f /workspace/docs/v1.0/MIGRATION_GUIDE.md && echo "✅ MIGRATION_GUIDE.md exists" || echo "⚠️  Missing MIGRATION_GUIDE.md"
test -f /workspace/docs/FAKE_GREEN_DETECTION_USER_GUIDE.md && echo "✅ FAKE_GREEN_DETECTION_USER_GUIDE.md exists" || echo "⚠️  Missing FAKE_GREEN_DETECTION_USER_GUIDE.md"
test -f /workspace/docs/CLI_ANALYZE_REFERENCE.md && echo "✅ CLI_ANALYZE_REFERENCE.md exists" || echo "⚠️  Missing CLI_ANALYZE_REFERENCE.md"
echo "Documentation check complete"
"""

[[expect.output]]
pattern = "✅.*exists"
description = "Should find existing documentation files"

[[expect.output]]
pattern = "Documentation check complete"
description = "Should complete documentation check"

[[expect.status]]
exit_code = 0

[report]
json = "documentation_links_report.json"
comment = "Verifies documentation structure matches README claims"
