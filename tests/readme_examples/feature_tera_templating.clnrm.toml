# README Example Test: Tera Templating
# Verifies: "Tera Templating - Dynamic configuration with Jinja2-like templates"
# Location in README: Lines 44-50, 108-173

[test.metadata]
name = "verify_tera_templating"
description = "Verify Tera templating with custom functions and variables as documented"
version = "1.0.0"

[service.tera_tester]
plugin = "generic_container"
image = "rust:1.70"
working_dir = "/workspace"

[[scenario]]
name = "tera_template_rendering"
service = "tera_tester"
run = """
cat > /tmp/test.clnrm.toml.tera << 'EOF'
[test.metadata]
name = "{{ svc }}_test"
description = "Test for {{ svc }}"

[vars]
svc = "{{ svc }}"
env = "{{ env }}"

[service.test]
plugin = "generic_container"
image = "alpine:latest"
env = { "SERVICE_NAME" = "{{ svc }}", "ENV" = "{{ env }}" }
EOF

# Render template with variables
clnrm template render /tmp/test.clnrm.toml.tera --var svc=myservice --var env=prod > /tmp/rendered.toml && \
cat /tmp/rendered.toml && \
grep 'myservice' /tmp/rendered.toml && \
grep 'prod' /tmp/rendered.toml
"""

[[expect.output]]
pattern = "myservice"
description = "Should render svc variable"

[[expect.output]]
pattern = "prod"
description = "Should render env variable"

[[expect.status]]
exit_code = 0
