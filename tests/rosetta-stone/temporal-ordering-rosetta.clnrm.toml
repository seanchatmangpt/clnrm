# Rosetta Stone Test #2: Temporal Ordering Validation
# Validates: TEMPORAL dimension - sequential operations with timing constraints
# Pattern: Validates must_precede relationships and duration bounds
#
# This test ensures:
# - Operations execute in correct order (db init → server start → request)
# - Spans have correct temporal relationships
# - Duration constraints are respected
# - No time-travel paradoxes in traces

[test.metadata]
name = "rosetta_temporal_ordering"
description = "Validates temporal ordering and duration constraints in distributed traces"
timeout = "120s"

# OTEL Collector
[services.otel_collector]
type = "otel_collector"
plugin = "generic_container"
image = "otel/opentelemetry-collector:latest"

[services.otel_collector.env]
ENABLE_OTLP_HTTP = "true"
ENABLE_OTLP_GRPC = "true"

# Database service - must start first
[services.database]
type = "generic_container"
plugin = "generic_container"
image = "postgres:16-alpine"

[services.database.env]
POSTGRES_PASSWORD = "testpass"
POSTGRES_DB = "testdb"
OTEL_SERVICE_NAME = "rosetta-database"
OTEL_EXPORTER_OTLP_ENDPOINT = "http://otel_collector:4318"

# Application server - depends on database
[services.app_server]
type = "generic_container"
plugin = "generic_container"
image = "alpine:latest"

[services.app_server.env]
DATABASE_URL = "postgres://postgres:testpass@database:5432/testdb"
OTEL_SERVICE_NAME = "rosetta-app-server"
OTEL_EXPORTER_OTLP_ENDPOINT = "http://otel_collector:4318"

# Test Steps - Sequential with timing
[[steps]]
name = "initialize_database"
service = "database"
command = ["sh", "-c", "echo 'DB Init Start' && sleep 2 && echo 'DB Init Complete'"]
expected_output_regex = "Complete"

[[steps]]
name = "start_application_server"
service = "app_server"
command = ["sh", "-c", "echo 'Server Start' && sleep 1 && echo 'Server Ready'"]
expected_output_regex = "Ready"

[[steps]]
name = "execute_first_request"
service = "app_server"
command = ["sh", "-c", "echo 'Request 1 Processing' && sleep 0.5 && echo 'Request 1 Success'"]
expected_output_regex = "Success"

[[steps]]
name = "execute_second_request"
service = "app_server"
command = ["sh", "-c", "echo 'Request 2 Processing' && sleep 0.3 && echo 'Request 2 Success'"]
expected_output_regex = "Success"

# OTEL Validation - Temporal dimension
[otel_validation]
enabled = true
validate_spans = true
validate_traces = true
validate_temporal_ordering = true

# Expected spans with timing constraints
[[otel_validation.expected_spans]]
name = "db.initialize"
required = true
min_duration_ms = 2000  # Should take at least 2 seconds
max_duration_ms = 3000

[otel_validation.expected_spans.attributes]
"db.system" = "postgresql"
"operation.type" = "init"

[[otel_validation.expected_spans]]
name = "server.start"
required = true
min_duration_ms = 1000
max_duration_ms = 2000

[otel_validation.expected_spans.attributes]
"server.state" = "starting"

[[otel_validation.expected_spans]]
name = "request.handle"
required = true
min_count = 2  # Two requests
max_duration_ms = 600

[otel_validation.expected_spans.attributes]
"http.method" = "GET"

# Temporal ordering assertions
[[otel_validation.temporal_constraints]]
span_name = "db.initialize"
must_precede = ["server.start"]
reason = "Database must initialize before server starts"

[[otel_validation.temporal_constraints]]
span_name = "server.start"
must_precede = ["request.handle"]
reason = "Server must be ready before handling requests"

[[otel_validation.temporal_constraints]]
span_name = "db.initialize"
must_complete_before = "server.start.begins"
max_gap_ms = 100

# Trace structure with ordering
[[otel_validation.expected_traces]]
span_names = ["db.initialize", "server.start", "request.handle"]
complete = true
ordered = true
parent_child = [["server.start", "request.handle"]]

[assertions]
execution_should_be_hermetic = true
temporal_ordering_should_be_valid = true
