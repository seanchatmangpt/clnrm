# String Transformation Rosetta Stone Test
# Tests all built-in string transformation functions with exact validation
# Validates slug(), kebab(), snake(), sha256(), toml_encode() transformations

[test.metadata]
name = "string_transform_rosetta"
description = "Validates all string transformation functions with deterministic outputs"
version = "1.0.0"
tags = ["rosetta-stone", "string-transforms", "validation", "deterministic"]

# Test container - lightweight Alpine for command execution
[services.test_container]
type = "generic_container"
plugin = "generic_container"
image = "alpine:latest"
description = "Container for executing string transformation tests"

# ============================================================================
# Scenario 1: slug() transformation - converts to URL-safe slugs
# ============================================================================

[[steps]]
name = "test_slug_simple"
service = "test_container"
command = ["echo", "{{ slug(s='Hello World') }}"]
expected_output_regex = "^hello-world$"
description = "Basic slug transformation with spaces"

[[steps]]
name = "test_slug_with_numbers"
service = "test_container"
command = ["echo", "{{ slug(s='Hello World 2025!') }}"]
expected_output_regex = "^hello-world-2025$"
description = "Slug transformation with numbers and special chars"

[[steps]]
name = "test_slug_special_chars"
service = "test_container"
command = ["echo", "{{ slug(s='Test@Example#String$2025') }}"]
expected_output_regex = "^test-example-string-2025$"
description = "Slug removes special characters except hyphens"

[[steps]]
name = "test_slug_consecutive_spaces"
service = "test_container"
command = ["echo", "{{ slug(s='Multiple   Spaces   Test') }}"]
expected_output_regex = "^multiple-spaces-test$"
description = "Slug collapses consecutive spaces to single hyphen"

[[steps]]
name = "test_slug_mixed_case"
service = "test_container"
command = ["echo", "{{ slug(s='CamelCaseString') }}"]
expected_output_regex = "^camelcasestring$"
description = "Slug converts to lowercase"

# ============================================================================
# Scenario 2: kebab() transformation - kebab-case conversion
# ============================================================================

[[steps]]
name = "test_kebab_simple"
service = "test_container"
command = ["echo", "{{ kebab(s='Hello World') }}"]
expected_output_regex = "^hello-world$"
description = "Basic kebab-case transformation"

[[steps]]
name = "test_kebab_camel_case"
service = "test_container"
command = ["echo", "{{ kebab(s='camelCaseString') }}"]
expected_output_regex = "^camel-case-string$"
description = "Kebab-case from camelCase"

[[steps]]
name = "test_kebab_snake_case"
service = "test_container"
command = ["echo", "{{ kebab(s='snake_case_string') }}"]
expected_output_regex = "^snake-case-string$"
description = "Kebab-case from snake_case"

[[steps]]
name = "test_kebab_numbers"
service = "test_container"
command = ["echo", "{{ kebab(s='Version2025Test') }}"]
expected_output_regex = "^version-2025-test$"
description = "Kebab-case with numbers"

# ============================================================================
# Scenario 3: snake() transformation - snake_case conversion
# ============================================================================

[[steps]]
name = "test_snake_simple"
service = "test_container"
command = ["echo", "{{ snake(s='Hello World') }}"]
expected_output_regex = "^hello_world$"
description = "Basic snake_case transformation"

[[steps]]
name = "test_snake_camel_case"
service = "test_container"
command = ["echo", "{{ snake(s='camelCaseString') }}"]
expected_output_regex = "^camel_case_string$"
description = "Snake_case from camelCase"

[[steps]]
name = "test_snake_kebab_case"
service = "test_container"
command = ["echo", "{{ snake(s='kebab-case-string') }}"]
expected_output_regex = "^kebab_case_string$"
description = "Snake_case from kebab-case"

[[steps]]
name = "test_snake_numbers"
service = "test_container"
command = ["echo", "{{ snake(s='Version2025Test') }}"]
expected_output_regex = "^version_2025_test$"
description = "Snake_case with numbers"

[[steps]]
name = "test_snake_special_chars"
service = "test_container"
command = ["echo", "{{ snake(s='Test@String#2025') }}"]
expected_output_regex = "^test_string_2025$"
description = "Snake_case removes special characters"

# ============================================================================
# Scenario 4: sha256() transformation - cryptographic hashing
# ============================================================================

[[steps]]
name = "test_sha256_simple"
service = "test_container"
command = ["echo", "{{ sha256(s='test') }}"]
expected_output_regex = "^9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08$"
description = "SHA-256 hash of 'test' - known deterministic value"

[[steps]]
name = "test_sha256_empty"
service = "test_container"
command = ["echo", "{{ sha256(s='') }}"]
expected_output_regex = "^e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855$"
description = "SHA-256 hash of empty string"

[[steps]]
name = "test_sha256_hello_world"
service = "test_container"
command = ["echo", "{{ sha256(s='Hello World') }}"]
expected_output_regex = "^a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e$"
description = "SHA-256 hash of 'Hello World'"

[[steps]]
name = "test_sha256_numbers"
service = "test_container"
command = ["echo", "{{ sha256(s='12345') }}"]
expected_output_regex = "^5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5$"
description = "SHA-256 hash of numeric string"

[[steps]]
name = "test_sha256_determinism"
service = "test_container"
command = ["sh", "-c", "echo {{ sha256(s='deterministic') }} && echo {{ sha256(s='deterministic') }}"]
expected_output_regex = "^[0-9a-f]{64}\\n[0-9a-f]{64}$"
description = "SHA-256 produces identical hashes for same input"

# ============================================================================
# Scenario 5: toml_encode() transformation - TOML encoding
# ============================================================================

[[steps]]
name = "test_toml_encode_simple"
service = "test_container"
command = ["echo", "{{ toml_encode(s='simple string') }}"]
expected_output_regex = '^"simple string"$'
description = "TOML encoding of simple string"

[[steps]]
name = "test_toml_encode_quotes"
service = "test_container"
command = ["echo", "{{ toml_encode(s='string with \"quotes\"') }}"]
expected_output_regex = '^"string with \\\\"quotes\\\\""$'
description = "TOML encoding escapes internal quotes"

[[steps]]
name = "test_toml_encode_backslash"
service = "test_container"
command = ["echo", "{{ toml_encode(s='path\\to\\file') }}"]
expected_output_regex = '^"path\\\\to\\\\file"$'
description = "TOML encoding escapes backslashes"

[[steps]]
name = "test_toml_encode_newline"
service = "test_container"
command = ["echo", "{{ toml_encode(s='line1\\nline2') }}"]
expected_output_regex = '^"line1\\\\nline2"$'
description = "TOML encoding escapes newlines"

# ============================================================================
# Scenario 6: Chained transformations - combining multiple functions
# ============================================================================

[[steps]]
name = "test_chain_slug_sha256"
service = "test_container"
command = ["echo", "{{ sha256(s=slug(s='Hello World')) }}"]
expected_output_regex = "^[0-9a-f]{64}$"
description = "Chain slug() into sha256() - slug first, then hash"

[[steps]]
name = "test_chain_kebab_sha256"
service = "test_container"
command = ["echo", "{{ sha256(s=kebab(s='CamelCaseTest')) }}"]
expected_output_regex = "^[0-9a-f]{64}$"
description = "Chain kebab() into sha256()"

[[steps]]
name = "test_chain_snake_toml"
service = "test_container"
command = ["echo", "{{ toml_encode(s=snake(s='CamelCase')) }}"]
expected_output_regex = '^"camel_case"$'
description = "Chain snake() into toml_encode()"

[[steps]]
name = "test_triple_chain"
service = "test_container"
command = ["echo", "{{ sha256(s=kebab(s=slug(s='Test String 2025'))) }}"]
expected_output_regex = "^[0-9a-f]{64}$"
description = "Triple chain: slug() -> kebab() -> sha256()"

# ============================================================================
# Assertions - Validate test execution
# ============================================================================

[assertions]
container_should_have_executed_commands = 32
execution_should_be_hermetic = true
all_steps_should_pass = true
description = "All 32 string transformation tests must pass with exact matches"
