# UUID/ID Generation Functions - Rosetta Stone Test
# Tests UUID v4, UUID v7, ULID generation and validation
# Validates format compliance and deterministic generation with seeds

[test.metadata]
name = "uuid_functions_rosetta"
description = "Comprehensive UUID/ID generation validation covering UUID v4, UUID v7, ULID formats and deterministic generation"
version = "1.0.0"

# Test container service - Alpine Linux for lightweight UUID validation
[services.test_container]
type = "generic_container"
plugin = "generic_container"
image = "alpine:latest"
description = "Lightweight container for UUID/ID generation testing"

# =============================================================================
# SCENARIO 1: UUID v4 Format Validation (Random)
# =============================================================================
# UUID v4 format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
# - Version field (4) must be '4'
# - Variant field (y) must be 8, 9, a, or b

[[steps]]
name = "test_uuid_v4_basic_format"
service = "test_container"
description = "Validate UUID v4 generates valid format with version 4"
command = ["sh", "-c", "echo '{{ uuid_v4() }}'"]
expected_output_regex = "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

[[steps]]
name = "test_uuid_v4_randomness"
service = "test_container"
description = "Verify UUID v4 generates different values on each call"
command = ["sh", "-c", "UUID1='{{ uuid_v4() }}'; UUID2='{{ uuid_v4() }}'; if [ \"$UUID1\" != \"$UUID2\" ]; then echo 'UNIQUE'; else echo 'DUPLICATE'; fi"]
expected_output_regex = "^UNIQUE$"

[[steps]]
name = "test_uuid_v4_lowercase"
service = "test_container"
description = "Confirm UUID v4 uses lowercase hexadecimal characters"
command = ["sh", "-c", "echo '{{ uuid_v4() }}' | grep -E '^[0-9a-f-]+$' && echo 'LOWERCASE'"]
expected_output_regex = "^LOWERCASE$"

# =============================================================================
# SCENARIO 2: UUID v4 Deterministic Generation with Seeds
# =============================================================================
# Seeded UUID v4 should produce identical results for same seed

[[steps]]
name = "test_uuid_v4_seed_format"
service = "test_container"
description = "Validate seeded UUID v4 maintains valid format"
command = ["sh", "-c", "echo '{{ uuid_v4(seed=42) }}'"]
expected_output_regex = "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

[[steps]]
name = "test_uuid_v4_seed_deterministic"
service = "test_container"
description = "Verify same seed produces identical UUID v4"
command = ["sh", "-c", "UUID1='{{ uuid_v4(seed=42) }}'; UUID2='{{ uuid_v4(seed=42) }}'; if [ \"$UUID1\" = \"$UUID2\" ]; then echo 'DETERMINISTIC'; else echo 'DIFFERENT'; fi"]
expected_output_regex = "^DETERMINISTIC$"

[[steps]]
name = "test_uuid_v4_different_seeds"
service = "test_container"
description = "Confirm different seeds produce different UUIDs"
command = ["sh", "-c", "UUID1='{{ uuid_v4(seed=42) }}'; UUID2='{{ uuid_v4(seed=100) }}'; if [ \"$UUID1\" != \"$UUID2\" ]; then echo 'UNIQUE'; else echo 'DUPLICATE'; fi"]
expected_output_regex = "^UNIQUE$"

[[steps]]
name = "test_uuid_v4_seed_consistency"
service = "test_container"
description = "Validate seed=42 produces expected deterministic value"
command = ["sh", "-c", "echo '{{ uuid_v4(seed=42) }}'"]
expected_output_regex = "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

# =============================================================================
# SCENARIO 3: UUID v7 Format Validation (Time-Ordered)
# =============================================================================
# UUID v7 format: xxxxxxxx-xxxx-7xxx-yxxx-xxxxxxxxxxxx
# - Version field (7) must be '7'
# - Contains timestamp in first 48 bits for ordering

[[steps]]
name = "test_uuid_v7_basic_format"
service = "test_container"
description = "Validate UUID v7 generates valid format with version 7"
command = ["sh", "-c", "echo '{{ uuid_v7() }}'"]
expected_output_regex = "^[0-9a-f]{8}-[0-9a-f]{4}-7[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

[[steps]]
name = "test_uuid_v7_uniqueness"
service = "test_container"
description = "Verify UUID v7 generates unique values"
command = ["sh", "-c", "UUID1='{{ uuid_v7() }}'; UUID2='{{ uuid_v7() }}'; if [ \"$UUID1\" != \"$UUID2\" ]; then echo 'UNIQUE'; else echo 'DUPLICATE'; fi"]
expected_output_regex = "^UNIQUE$"

[[steps]]
name = "test_uuid_v7_lowercase"
service = "test_container"
description = "Confirm UUID v7 uses lowercase hexadecimal"
command = ["sh", "-c", "echo '{{ uuid_v7() }}' | grep -E '^[0-9a-f-]+$' && echo 'LOWERCASE'"]
expected_output_regex = "^LOWERCASE$"

[[steps]]
name = "test_uuid_v7_version_field"
service = "test_container"
description = "Verify UUID v7 has '7' in version position (13th character)"
command = ["sh", "-c", "UUID='{{ uuid_v7() }}'; echo \"$UUID\" | cut -c 15 | grep -E '^7$' && echo 'VERSION_7'"]
expected_output_regex = "^VERSION_7$"

# =============================================================================
# SCENARIO 4: ULID Format Validation
# =============================================================================
# ULID format: 26 characters, Crockford's Base32 encoding
# Pattern: TTTTTTTTTTRRRRRRRRRRRRRRRR (10 timestamp + 16 random)

[[steps]]
name = "test_ulid_basic_format"
service = "test_container"
description = "Validate ULID generates 26-character Crockford Base32 string"
command = ["sh", "-c", "echo '{{ ulid() }}'"]
expected_output_regex = "^[0-9A-HJKMNP-TV-Z]{26}$"

[[steps]]
name = "test_ulid_length"
service = "test_container"
description = "Verify ULID is exactly 26 characters long"
command = ["sh", "-c", "ULID='{{ ulid() }}'; if [ ${#ULID} -eq 26 ]; then echo 'LENGTH_26'; else echo 'WRONG_LENGTH'; fi"]
expected_output_regex = "^LENGTH_26$"

[[steps]]
name = "test_ulid_uniqueness"
service = "test_container"
description = "Confirm ULID generates unique values"
command = ["sh", "-c", "ULID1='{{ ulid() }}'; ULID2='{{ ulid() }}'; if [ \"$ULID1\" != \"$ULID2\" ]; then echo 'UNIQUE'; else echo 'DUPLICATE'; fi"]
expected_output_regex = "^UNIQUE$"

[[steps]]
name = "test_ulid_uppercase"
service = "test_container"
description = "Validate ULID uses uppercase characters (Crockford Base32)"
command = ["sh", "-c", "echo '{{ ulid() }}' | grep -E '^[0-9A-HJKMNP-TV-Z]+$' && echo 'UPPERCASE'"]
expected_output_regex = "^UPPERCASE$"

# =============================================================================
# SCENARIO 5: Cross-Format Comparison
# =============================================================================
# Verify each ID generation function produces distinct formats

[[steps]]
name = "test_uuid_v4_vs_v7_format_difference"
service = "test_container"
description = "Confirm UUID v4 and v7 have different version fields"
command = ["sh", "-c", "V4='{{ uuid_v4() }}'; V7='{{ uuid_v7() }}'; V4_VER=$(echo \"$V4\" | cut -c 15); V7_VER=$(echo \"$V7\" | cut -c 15); if [ \"$V4_VER\" = '4' ] && [ \"$V7_VER\" = '7' ]; then echo 'VERSIONS_CORRECT'; else echo 'VERSIONS_WRONG'; fi"]
expected_output_regex = "^VERSIONS_CORRECT$"

[[steps]]
name = "test_uuid_vs_ulid_format_difference"
service = "test_container"
description = "Verify UUID and ULID have different formats (36 chars vs 26 chars)"
command = ["sh", "-c", "UUID='{{ uuid_v4() }}'; ULID='{{ ulid() }}'; if [ ${#UUID} -eq 36 ] && [ ${#ULID} -eq 26 ]; then echo 'FORMATS_DIFFERENT'; else echo 'FORMATS_SAME'; fi"]
expected_output_regex = "^FORMATS_DIFFERENT$"

[[steps]]
name = "test_all_ids_unique"
service = "test_container"
description = "Ensure UUID v4, UUID v7, and ULID all generate unique values"
command = ["sh", "-c", "V4='{{ uuid_v4() }}'; V7='{{ uuid_v7() }}'; UL='{{ ulid() }}'; if [ \"$V4\" != \"$V7\" ] && [ \"$V4\" != \"$UL\" ] && [ \"$V7\" != \"$UL\" ]; then echo 'ALL_UNIQUE'; else echo 'COLLISION'; fi"]
expected_output_regex = "^ALL_UNIQUE$"

# =============================================================================
# SCENARIO 6: Edge Cases and Validation
# =============================================================================
# Test boundary conditions and special cases

[[steps]]
name = "test_uuid_v4_seed_zero"
service = "test_container"
description = "Validate UUID v4 with seed=0 produces valid format"
command = ["sh", "-c", "echo '{{ uuid_v4(seed=0) }}'"]
expected_output_regex = "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

[[steps]]
name = "test_uuid_v4_large_seed"
service = "test_container"
description = "Verify UUID v4 with large seed value (seed=999999)"
command = ["sh", "-c", "echo '{{ uuid_v4(seed=999999) }}'"]
expected_output_regex = "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"

[[steps]]
name = "test_multiple_uuid_v4_calls"
service = "test_container"
description = "Test multiple UUID v4 generations in single command"
command = ["sh", "-c", "UUID1='{{ uuid_v4() }}'; UUID2='{{ uuid_v4() }}'; UUID3='{{ uuid_v4() }}'; if [ \"$UUID1\" != \"$UUID2\" ] && [ \"$UUID2\" != \"$UUID3\" ] && [ \"$UUID1\" != \"$UUID3\" ]; then echo 'ALL_UNIQUE'; else echo 'COLLISION'; fi"]
expected_output_regex = "^ALL_UNIQUE$"

[[steps]]
name = "test_uuid_v7_temporal_ordering"
service = "test_container"
description = "Verify UUID v7 maintains lexicographic ordering (first 8 chars should be timestamp-based)"
command = ["sh", "-c", "V7_1='{{ uuid_v7() }}'; sleep 0.01; V7_2='{{ uuid_v7() }}'; PREFIX1=$(echo \"$V7_1\" | cut -c 1-8); PREFIX2=$(echo \"$V7_2\" | cut -c 1-8); if [ \"$PREFIX1\" != \"$PREFIX2\" ] || [ \"$V7_1\" \\< \"$V7_2\" ]; then echo 'ORDERED'; else echo 'UNORDERED'; fi"]
expected_output_regex = "^ORDERED$"

[[steps]]
name = "test_ulid_no_ambiguous_chars"
service = "test_container"
description = "Confirm ULID excludes ambiguous characters (I, L, O, U)"
command = ["sh", "-c", "ULID='{{ ulid() }}'; echo \"$ULID\" | grep -v '[ILOU]' && echo 'NO_AMBIGUOUS'"]
expected_output_regex = "^NO_AMBIGUOUS$"

# =============================================================================
# Assertions
# =============================================================================

[assertions]
container_should_have_executed_commands = 26
execution_should_be_hermetic = true
all_steps_should_pass = true
