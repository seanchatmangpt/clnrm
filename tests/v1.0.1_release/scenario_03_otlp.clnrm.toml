# ====================================================================================
# Scenario 03: OTLP Collector Integration
# Purpose: Validate OTLP exporter with real collector (Jaeger)
# Validation: End-to-end telemetry pipeline with collector
# ====================================================================================

[meta]
name = "scenario_03_otlp_collector_validation"
version = "1.0.1"
description = "OTLP exporter validation with Jaeger collector"

[determinism]
seed = 42
freeze_clock = "2025-01-01T00:00:00Z"

[vars]
svc = "clnrm"
env = "ci"
exporter = "otlp"
collector_image = "jaegertracing/all-in-one:latest"
image = "homebrew/brew:latest"

# OTEL configuration - OTLP HTTP exporter to Jaeger
[otel]
exporter = "otlp"
sample_ratio = 1.0
endpoint = "http://jaeger:4318"
resources = { "service.name" = "clnrm", "service.version" = "1.0.1", "env" = "ci" }

# Service: Jaeger collector
[service.jaeger]
type = "generic_container"
plugin = "generic_container"
image = "jaegertracing/all-in-one:latest"
args = []
env = { "COLLECTOR_OTLP_ENABLED" = "true" }
ports = ["4318:4318", "16686:16686"]  # OTLP HTTP, UI
wait_for_span = "jaeger.started"

# Service: Homebrew container (linked to Jaeger)
[service.brew]
type = "generic_container"
plugin = "generic_container"
image = "homebrew/brew:latest"
args = ["bash", "-lc", "echo ready"]
env = {
    "HOMEBREW_NO_ANALYTICS" = "1",
    "HOMEBREW_NO_AUTO_UPDATE" = "1",
    "OTEL_EXPORTER_OTLP_ENDPOINT" = "http://jaeger:4318"
}
links = ["jaeger"]
wait_for_span = "clnrm.run"

# Scenario: Install and run self-test with OTLP exporter
[[scenario]]
name = "otlp_collector_integration"
service = "brew"
run = "bash -lc 'brew tap seanchatmangpt/clnrm && brew install clnrm && clnrm self-test --suite basic --otel-exporter otlp --otel-endpoint http://jaeger:4318'"
artifacts.collect = ["spans:otlp"]

# Root span validation
[[expect.span]]
name = "clnrm.run"
kind = "internal"
attrs.all = { "result" = "pass" }
duration_ms = { min = 10, max = 600000 }

# Step span validation
[[expect.span]]
name = "clnrm.step:hello_world"
parent = "clnrm.run"
kind = "internal"
events.any = ["container.start", "container.exec", "container.stop"]

# OTLP export span (framework exports to collector)
[[expect.span]]
name = "clnrm.otel.export"
parent = "clnrm.run"
kind = "client"
attrs.any = {
    "rpc.service" = "opentelemetry.proto.collector.trace.v1.TraceService",
    "net.peer.name" = "jaeger"
}

# Graph topology validation
[expect.graph]
must_include = [
    ["clnrm.run", "clnrm.step:hello_world"],
    ["clnrm.run", "clnrm.otel.export"]
]
acyclic = true

# Span count validation
[expect.counts]
spans_total = { gte = 3, lte = 200 }
errors_total = { eq = 0 }
by_name = {
    "clnrm.run" = { eq = 1 },
    "clnrm.step:hello_world" = { gte = 1 },
    "clnrm.otel.export" = { gte = 1 }
}

# Temporal containment validation
[[expect.window]]
outer = "clnrm.run"
contains = ["clnrm.step:hello_world", "clnrm.otel.export"]

# Ordering validation
[expect.order]
must_precede = [
    ["clnrm.run", "clnrm.step:hello_world"],
    ["clnrm.step:hello_world", "clnrm.otel.export"]  # Export after execution
]

# Status validation
[expect.status]
all = "OK"

# Hermeticity validation - relaxed for OTLP collector
[expect.hermeticity]
no_external_services = false  # Collector connection allowed
resource_attrs.must_match = { "service.name" = "clnrm", "env" = "ci" }
span_attrs.allow_keys = ["net.peer.name", "rpc.service"]  # OTLP attributes allowed

# Resource limits
[limits]
cpu_millicores = 1000  # Collector needs resources
memory_mb = 1024

# Reporting
[report]
json = "scenario_03_otlp.report.json"
junit = "scenario_03_otlp.junit.xml"
digest = "scenario_03_otlp.trace.sha256"
