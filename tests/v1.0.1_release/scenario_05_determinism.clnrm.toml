# ====================================================================================
# Scenario 05: Determinism Validation (kcura 5-iteration pattern)
# Purpose: Run identical test 5 times and verify bit-identical results
# Validation: All 5 iterations produce identical normalized span graphs
# ====================================================================================

[meta]
name = "scenario_05_determinism_validation"
version = "1.0.1"
description = "5-iteration determinism validation with identical span graph hashing"

# Critical: Determinism config ensures reproducible results
[determinism]
seed = 42
freeze_clock = "2025-01-01T00:00:00Z"
normalize_output = true  # Remove non-deterministic fields
exclude_fields = ["timestamp", "container_id", "span_id", "trace_id", "uuid"]

[vars]
svc = "clnrm"
env = "ci"
exporter = "stdout"
image = "homebrew/brew:latest"
iterations = 5

[otel]
exporter = "stdout"
sample_ratio = 1.0
resources = { "service.name" = "clnrm", "service.version" = "1.0.1", "env" = "ci" }

[service.brew]
type = "generic_container"
plugin = "generic_container"
image = "homebrew/brew:latest"
args = ["bash", "-lc", "echo ready"]
env = {
    "HOMEBREW_NO_ANALYTICS" = "1",
    "HOMEBREW_NO_AUTO_UPDATE" = "1",
    "SOURCE_DATE_EPOCH" = "1704067200"  # Deterministic timestamp
}
wait_for_span = "clnrm.run"

# Iteration 1
[[scenario]]
name = "determinism_iteration_01"
service = "brew"
run = "bash -lc 'brew tap seanchatmangpt/clnrm && brew install clnrm && clnrm self-test --suite basic --otel-exporter stdout'"
artifacts.collect = ["spans:default"]
iteration = 1

# Iteration 2
[[scenario]]
name = "determinism_iteration_02"
service = "brew"
run = "bash -lc 'brew tap seanchatmangpt/clnrm && brew install clnrm && clnrm self-test --suite basic --otel-exporter stdout'"
artifacts.collect = ["spans:default"]
iteration = 2
require_fresh_container = true

# Iteration 3
[[scenario]]
name = "determinism_iteration_03"
service = "brew"
run = "bash -lc 'brew tap seanchatmangpt/clnrm && brew install clnrm && clnrm self-test --suite basic --otel-exporter stdout'"
artifacts.collect = ["spans:default"]
iteration = 3
require_fresh_container = true

# Iteration 4
[[scenario]]
name = "determinism_iteration_04"
service = "brew"
run = "bash -lc 'brew tap seanchatmangpt/clnrm && brew install clnrm && clnrm self-test --suite basic --otel-exporter stdout'"
artifacts.collect = ["spans:default"]
iteration = 4
require_fresh_container = true

# Iteration 5
[[scenario]]
name = "determinism_iteration_05"
service = "brew"
run = "bash -lc 'brew tap seanchatmangpt/clnrm && brew install clnrm && clnrm self-test --suite basic --otel-exporter stdout'"
artifacts.collect = ["spans:default"]
iteration = 5
require_fresh_container = true

# Root span validation (applies to all iterations)
[[expect.span]]
name = "clnrm.run"
kind = "internal"
attrs.all = { "result" = "pass" }
duration_ms = { min = 10, max = 600000 }

# Step span validation
[[expect.span]]
name = "clnrm.step:hello_world"
parent = "clnrm.run"
kind = "internal"
events.any = ["container.start", "container.exec", "container.stop"]

# Graph topology validation
[expect.graph]
must_include = [["clnrm.run", "clnrm.step:hello_world"]]
acyclic = true

# Span count validation
[expect.counts]
spans_total = { gte = 2, lte = 200 }
errors_total = { eq = 0 }
by_name = { "clnrm.run" = { eq = 1 }, "clnrm.step:hello_world" = { gte = 1 } }

# Temporal containment validation
[[expect.window]]
outer = "clnrm.run"
contains = ["clnrm.step:hello_world"]

# Ordering validation
[expect.order]
must_precede = [["clnrm.run", "clnrm.step:hello_world"]]

# Status validation
[expect.status]
all = "OK"

# Hermeticity validation
[expect.hermeticity]
no_external_services = true
resource_attrs.must_match = { "service.name" = "clnrm", "env" = "ci" }
span_attrs.forbid_keys = ["net.peer.name", "db.connection_string", "http.url"]

# Determinism validation - CRITICAL
[expect.determinism]
# All 5 iterations must produce identical normalized span graphs
iterations = 5
hash_algorithm = "sha256"
normalize_before_hash = true
exclude_fields = ["timestamp", "container_id", "span_id", "trace_id", "uuid", "duration_ns"]
# Verification: hash(iteration_1) == hash(iteration_2) == ... == hash(iteration_5)
require_identical_hashes = true
tolerance_ms = 0  # Zero tolerance for determinism

# Resource limits
[limits]
cpu_millicores = 500
memory_mb = 512

# Reporting
[report]
json = "scenario_05_determinism.report.json"
junit = "scenario_05_determinism.junit.xml"
digest = "scenario_05_determinism.trace.sha256"
determinism_report = "scenario_05_determinism_hashes.json"  # Hash comparison report
