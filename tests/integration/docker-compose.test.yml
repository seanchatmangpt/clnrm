version: '3.8'

# Docker Compose configuration for integration testing
# This file defines the test environment infrastructure

services:
  # SurrealDB - Primary database for integration tests
  surrealdb:
    image: surrealdb/surrealdb:latest
    container_name: clnrm-test-surrealdb
    command: start --log trace --user root --pass root memory
    ports:
      - "8000:8000"
    environment:
      - SURREAL_LOG=trace
      - SURREAL_STRICT=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - clnrm-test-network

  # OpenTelemetry Collector - Observability backend
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: clnrm-test-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check
    environment:
      - OTEL_LOG_LEVEL=debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - clnrm-test-network
    depends_on:
      - jaeger

  # Jaeger - Distributed tracing UI
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: clnrm-test-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC receiver
      - "14268:14268" # HTTP receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:14269/"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - clnrm-test-network

  # Prometheus - Metrics storage and querying
  prometheus:
    image: prom/prometheus:latest
    container_name: clnrm-test-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - clnrm-test-network

  # Alpine - Lightweight container for basic tests
  alpine:
    image: alpine:latest
    container_name: clnrm-test-alpine
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    networks:
      - clnrm-test-network

  # Ubuntu - Full-featured container for complex tests
  ubuntu:
    image: ubuntu:22.04
    container_name: clnrm-test-ubuntu
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    networks:
      - clnrm-test-network

  # Redis - Cache and state management for tests
  redis:
    image: redis:alpine
    container_name: clnrm-test-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - clnrm-test-network

  # PostgreSQL - Alternative database for compatibility tests
  postgres:
    image: postgres:15-alpine
    container_name: clnrm-test-postgres
    environment:
      - POSTGRES_DB=clnrm_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - clnrm-test-network

  # Mock API Server - Simulates external APIs
  mock-api:
    image: mockserver/mockserver:latest
    container_name: clnrm-test-mock-api
    ports:
      - "1080:1080"
    environment:
      - MOCKSERVER_LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1080/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - clnrm-test-network

networks:
  clnrm-test-network:
    driver: bridge
    name: clnrm-test-network

volumes:
  prometheus-data:
    name: clnrm-test-prometheus-data
  postgres-data:
    name: clnrm-test-postgres-data

# Usage:
# Start all services:
#   docker-compose -f tests/integration/docker-compose.test.yml up -d
#
# Start specific service:
#   docker-compose -f tests/integration/docker-compose.test.yml up -d surrealdb
#
# View logs:
#   docker-compose -f tests/integration/docker-compose.test.yml logs -f
#
# Stop all services:
#   docker-compose -f tests/integration/docker-compose.test.yml down
#
# Stop and remove volumes:
#   docker-compose -f tests/integration/docker-compose.test.yml down -v
#
# Check service health:
#   docker-compose -f tests/integration/docker-compose.test.yml ps
