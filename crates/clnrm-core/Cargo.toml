[package]
name = "clnrm-core"
version.workspace = true
edition.workspace = true
license.workspace = true
authors.workspace = true
repository.workspace = true
description = "Cleanroom Testing Framework - Core library"
readme = "../../README.md"
keywords = ["testing", "integration", "containers", "hermetic", "ai"]
categories = ["development-tools"]

[lib]
name = "clnrm_core"
path = "src/lib.rs"
test = false

[dependencies]
# Core dependencies
tokio = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
anyhow = { workspace = true }
tracing = { workspace = true }

# Container dependencies
testcontainers = { workspace = true }
testcontainers-modules = { workspace = true }
futures-util = { workspace = true }
surrealdb = { workspace = true }

# CLI dependencies
clap = { workspace = true }
env_logger = { workspace = true }
log = { workspace = true }
toml = { workspace = true }
regex = { workspace = true }
walkdir = { workspace = true }
tempfile = { workspace = true }
junit-report = { workspace = true }
notify = { workspace = true }
toml_edit = { workspace = true }
quick-xml = { workspace = true }

# OpenTelemetry dependencies
opentelemetry = { workspace = true }
opentelemetry_sdk = { workspace = true }
opentelemetry-stdout = { workspace = true }
opentelemetry-otlp = { workspace = true }
opentelemetry-jaeger = { workspace = true }
opentelemetry-zipkin = { workspace = true }
tracing-opentelemetry = { workspace = true }
tracing-subscriber = { workspace = true }

# Additional dependencies for OTLP integration
reqwest = { workspace = true }

# Utility dependencies
uuid = { workspace = true }
chrono = { workspace = true }
hostname = { workspace = true }
rand = "0.8"
semver = "1.0"
glob = "0.3"
url = "2.5"

# Template rendering
tera = "1.19"
sha2 = "0.10"
globset = "0.4.17"
Inflector = "0.11.4"
fake = { version = "2.9", features = [
  "derive",
  "chrono",
  "http",
  "uuid",
  "random_color",
] }

[dev-dependencies]
# Property-based testing
proptest = "1.4"

# Benchmarking
criterion = { workspace = true }
tempfile = { workspace = true }

# Async testing
tokio = { workspace = true }

# Serial testing for global state
serial_test = "3.2"

[[bench]]
name = "hot_reload_critical_path"
harness = false
path = "../../benches/hot_reload_critical_path.rs"

[[example]]
name = "status-validator-demo"
path = "examples/validation/status_validator_demo.rs"

[[example]]
name = "validate-toml-format"
path = "examples/toml-configuration/validate-toml-format.rs"

[[example]]
name = "complete-dogfooding-suite"
path = "examples/framework-self-testing/complete-dogfooding-suite.rs"

[[example]]
name = "observability-demo"
path = "examples/observability/observability-demo.rs"

[[example]]
name = "custom-plugin-demo"
path = "examples/plugins/custom-plugin-demo.rs"

[[example]]
name = "container-reuse-benchmark"
path = "examples/performance/container-reuse-benchmark.rs"

[[example]]
name = "container-lifecycle-test"
path = "examples/framework-self-testing/container-lifecycle-test.rs"

[[example]]
name = "config-loading-test"
path = "examples/config/config-loading-test.rs"

[[example]]
name = "surrealdb-ollama-integration"
path = "examples/surrealdb-ollama-integration.rs"

[[example]]
name = "hermetic-isolation-test"
path = "../../examples/framework-self-testing/hermetic_isolation_test.rs"

[[example]]
name = "plugin-system-test"
path = "../../examples/framework-self-testing/plugin_system_test.rs"

[[example]]
name = "observability-test"
path = "../../examples/framework-self-testing/observability_test.rs"

[[example]]
name = "simple-framework-test"
path = "../../examples/framework-self-testing/simple-framework-test.rs"

[[example]]
name = "innovative-dogfood-test"
path = "examples/framework-self-testing/innovative-dogfood-test.rs"

[[example]]
name = "observability-self-test"
path = "examples/observability/observability-self-test.rs"

[[example]]
name = "plugin-self-test"
path = "examples/plugins/plugin-self-test.rs"

[[example]]
name = "otel-stdout-exporter-demo"
path = "../../examples/otel_stdout_exporter_demo.rs"

# Integration tests are done via clnrm.toml files, not Rust code
# See tests/integration/*.toml for actual integration tests
# Unit tests disabled for 1-second timeout enforcement
# Use clnrm.toml files for integration testing

[[example]]
name = "framework-stress-test"
path = "examples/innovations/framework-stress-test.rs"

[[example]]
name = "meta-testing-framework"
path = "examples/innovations/meta-testing-framework.rs"

[[example]]
name = "distributed-testing-orchestrator"
path = "examples/innovations/distributed-testing-orchestrator.rs"

[[example]]
name = "framework-documentation-validator"
path = "examples/innovations/framework-documentation-validator.rs"

[[example]]
name = "ai-powered-test-optimizer"
path = "examples/innovations/ai-powered-test-optimizer.rs"

[[example]]
name = "simple-framework-stress-demo"
path = "examples/innovations/simple-framework-stress-demo.rs"

[[example]]
name = "otel-graph-validation"
path = "examples/observability/otel_graph_validation.rs"

[features]
default = []
ai = [
] # Marker feature for AI functionality (no dependencies to avoid circular deps)
otel-testing = ["opentelemetry_sdk/testing"]
otel-traces = [] # Feature for OpenTelemetry traces functionality

# Test timeout enforcement
[package.metadata.cargo-make]
test_timeout = 1
