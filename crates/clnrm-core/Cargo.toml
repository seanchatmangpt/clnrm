[package]
name = "clnrm-core"
version.workspace = true
edition.workspace = true
license.workspace = true
authors.workspace = true
repository.workspace = true
description = "Cleanroom Testing Framework - Core library"
readme = "../../README.md"
keywords = ["testing", "integration", "containers", "hermetic", "ai"]
categories = ["development-tools"]

[lib]
name = "clnrm_core"
path = "src/lib.rs"

[dependencies]
# Core dependencies
tokio = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
anyhow = { workspace = true }
tracing = { workspace = true }

# Container dependencies
testcontainers = { workspace = true }
testcontainers-modules = { workspace = true }
futures-util = { workspace = true }
surrealdb = { workspace = true }

# CLI dependencies
clap = { workspace = true }
env_logger = { workspace = true }
log = { workspace = true }
toml = { workspace = true }
regex = { workspace = true }
walkdir = { workspace = true }
tempfile = { workspace = true }
junit-report = { workspace = true }
notify = { workspace = true }
toml_edit = { workspace = true }

# OpenTelemetry dependencies
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
opentelemetry-stdout = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true }

# Utility dependencies
uuid = { workspace = true }
chrono = { workspace = true }
reqwest = { version = "0.12", features = ["json"] }
rand = "0.8"
semver = "1.0"
glob = "0.3"

# Template rendering
tera = "1.19"
sha2 = "0.10"
globset = "0.4.17"

[dev-dependencies]
# Property-based testing
proptest = "1.4"

# Benchmarking
criterion = { workspace = true }
tempfile = { workspace = true }

[[bench]]
name = "hot_reload_critical_path"
harness = false
path = "../../benches/hot_reload_critical_path.rs"

[[example]]
name = "status-validator-demo"
path = "examples/validation/status_validator_demo.rs"

[[example]]
name = "validate-toml-format"
path = "examples/toml-configuration/validate-toml-format.rs"

[[example]]
name = "complete-dogfooding-suite"
path = "examples/framework-self-testing/complete-dogfooding-suite.rs"

[[example]]
name = "observability-demo"
path = "examples/observability/observability-demo.rs"

[[example]]
name = "custom-plugin-demo"
path = "examples/plugins/custom-plugin-demo.rs"

[[example]]
name = "container-reuse-benchmark"
path = "examples/performance/container-reuse-benchmark.rs"

[[example]]
name = "container-lifecycle-test"
path = "examples/framework-self-testing/container-lifecycle-test.rs"

[[example]]
name = "config-loading-test"
path = "examples/config/config-loading-test.rs"

[[example]]
name = "surrealdb-ollama-integration"
path = "examples/surrealdb-ollama-integration.rs"

[[example]]
name = "hermetic-isolation-test"
path = "../../examples/framework-self-testing/hermetic_isolation_test.rs"

[[example]]
name = "plugin-system-test"
path = "../../examples/framework-self-testing/plugin_system_test.rs"

[[example]]
name = "observability-test"
path = "../../examples/framework-self-testing/observability_test.rs"

[[example]]
name = "simple-framework-test"
path = "../../examples/framework-self-testing/simple-framework-test.rs"

[[example]]
name = "innovative-dogfood-test"
path = "examples/framework-self-testing/innovative-dogfood-test.rs"

[[example]]
name = "observability-self-test"
path = "examples/observability/observability-self-test.rs"

[[example]]
name = "plugin-self-test"
path = "examples/plugins/plugin-self-test.rs"

[[example]]
name = "otel-stdout-exporter-demo"
path = "../../examples/otel_stdout_exporter_demo.rs"

# Integration tests
[[test]]
name = "prd_template_workflow"
path = "tests/integration/prd_template_workflow.rs"

# [[test]]
# name = "prd_hermetic_isolation"
# path = "tests/integration/prd_hermetic_isolation.rs"

# [[test]]
# name = "prd_otel_validation"
# path = "tests/integration/prd_otel_validation.rs"

# London School TDD Tests
[[test]]
name = "service_registry_london_tdd"
path = "tests/integration/service_registry_london_tdd.rs"

[[test]]
name = "generic_container_plugin_london_tdd"
path = "tests/integration/generic_container_plugin_london_tdd.rs"

# [[test]]
# name = "service_metrics_london_tdd"
# path = "tests/integration/service_metrics_london_tdd.rs"

[[test]]
name = "error_handling_london_tdd"
path = "tests/integration/error_handling_london_tdd.rs"

# v1.0 Critical Tests - London School TDD
[[test]]
name = "hot_reload_integration"
path = "tests/integration/hot_reload_integration.rs"

[[test]]
name = "change_detection_integration"
path = "tests/integration/change_detection_integration.rs"

[[test]]
name = "macro_library_integration"
path = "tests/integration/macro_library_integration.rs"

[[test]]
name = "report_format_integration"
path = "tests/integration/report_format_integration.rs"

[[test]]
name = "fake_green_detection"
path = "tests/integration/fake_green_detection.rs"

[[test]]
name = "artifacts_collection_test"
path = "tests/integration/artifacts_collection_test.rs"

[[example]]
name = "framework-stress-test"
path = "examples/innovations/framework-stress-test.rs"

[[example]]
name = "meta-testing-framework"
path = "examples/innovations/meta-testing-framework.rs"

[[example]]
name = "distributed-testing-orchestrator"
path = "examples/innovations/distributed-testing-orchestrator.rs"

[[example]]
name = "framework-documentation-validator"
path = "examples/innovations/framework-documentation-validator.rs"

[[example]]
name = "ai-powered-test-optimizer"
path = "examples/innovations/ai-powered-test-optimizer.rs"

[[example]]
name = "simple-framework-stress-demo"
path = "examples/innovations/simple-framework-stress-demo.rs"

[features]
default = ["tracing-subscriber"]
otel-stdout = ["opentelemetry-stdout"]
otel-logs = ["opentelemetry", "opentelemetry_sdk"]
otel-traces = [
  "opentelemetry",
  "opentelemetry_sdk",
  "opentelemetry-stdout",
  "opentelemetry-otlp",
  "tracing-opentelemetry",
  "tracing-subscriber",
]
otel-metrics = ["opentelemetry", "opentelemetry_sdk"]
otel = ["otel-traces", "otel-metrics", "otel-stdout", "otel-logs"]
