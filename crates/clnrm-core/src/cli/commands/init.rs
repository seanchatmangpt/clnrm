//! Init command implementation
//!
//! Handles project initialization with template generation and directory
//! structure creation.

use crate::error::{CleanroomError, Result};

/// Initialize a new test project in the current directory
pub fn init_project(force: bool, with_config: bool) -> Result<()> {
    println!("üöÄ Initializing cleanroom test project in current directory");

    // Check if already initialized
    let tests_dir = std::path::Path::new("tests");
    let scenarios_dir = std::path::Path::new("scenarios");
    let basic_test_file = tests_dir.join("basic.clnrm.toml");

    if tests_dir.exists() && scenarios_dir.exists() && basic_test_file.exists() {
        if !force {
            return Err(
                CleanroomError::validation_error("Project already initialized")
                    .with_context("Use --force to reinitialize"),
            );
        }
        println!("Reinitializing existing project (--force flag used)");
    }

    // Create directory structure
    std::fs::create_dir_all(tests_dir)?;
    std::fs::create_dir_all(scenarios_dir)?;

    // Create basic test file
    let test_content = r#"# Cleanroom Test Definition
# Generated by clnrm init

[test.metadata]
name = "basic_test"
description = "Basic integration test"
timeout = "120s"

[services.test_container]
type = "generic_container"
plugin = "alpine"
image = "alpine:latest"

[[steps]]
name = "hello_world"
command = ["echo", "Hello from cleanroom!"]
expected_output_regex = "Hello from cleanroom!"

[[steps]]
name = "verify_environment"
command = ["sh", "-c", "echo 'Test environment ready' && uname -a"]
expected_output_regex = "Test environment ready"
"#;

    std::fs::write(basic_test_file, test_content)?;

    // Create README
    let readme_content = r#"# Cleanroom Test Project

This project uses the cleanroom testing framework for hermetic integration testing.

## Quick Start

```bash
# Run tests
clnrm run tests/

# Validate configuration
clnrm validate tests/

# Show available plugins
clnrm plugins
```

## Project Structure

- `tests/` - Test definition files (.clnrm.toml)
- `scenarios/` - Test scenario definitions
- `cleanroom.toml` - Optional framework configuration
- `README.md` - This file

## Framework Self-Testing

This project demonstrates the cleanroom framework testing itself through the "eat your own dog food" principle.
"#;

    std::fs::write("README.md", readme_content)?;

    // Create cleanroom.toml if requested
    if with_config {
        let config_content = r#"# Cleanroom Framework Configuration (optional)
# The framework works without this file - only add when customizing

[project]
name = "my-project"
version = "0.1.0"

# Uncomment to enable parallel execution
# [cli]
# parallel = true
# jobs = 4

# Uncomment to enable container reuse (10-50x faster)
# [containers]
# reuse_enabled = true
# default_image = "alpine:latest"

# See docs for all options: https://docs.cleanroom.dev/config
"#;
        std::fs::write("cleanroom.toml", config_content)?;
        println!("‚úÖ Project initialized successfully with configuration");
        println!("üìÅ Created: tests/basic.clnrm.toml, cleanroom.toml, README.md");
    } else {
        println!("‚úÖ Project initialized successfully (zero-config)");
        println!("üìÅ Created: tests/basic.clnrm.toml, README.md");
    }

    Ok(())
}
