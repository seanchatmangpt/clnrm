{# _macros.toml.tera - Cleanroom v0.7.0 Comprehensive Macro Library

   Complete macro library for advanced test authoring (Issue #7).
   Import with: {% import "_macros.toml.tera" as m %}

   This library includes:

   BASIC MACROS (MVP):
   1. span() - OTEL span expectations (most used)
   2. service() - Service definitions (required for every test)
   3. scenario() - Test scenarios (required for execution)

   ADVANCED MACROS (Issue #7):
   4. span_exists() - Simple span existence validation
   5. graph_relationship() - Parent-child span relationships
   6. temporal_ordering() - Span temporal ordering
   7. error_propagation() - Error propagation patterns
   8. service_interaction() - Service-to-service interactions
   9. attribute_validation() - Attribute key-value validation
   10. resource_check() - Resource existence validation
   11. batch_validation() - Batch span validation with conditions
#}

{# ============================================================================
   MACRO: span(name, parent="", attrs)

   Generate [[expect.span]] block for OpenTelemetry span validation.
   This is the MOST CRITICAL macro - 80%+ of templates use span validation.

   Parameters:
     - name (string): Span name to match
     - parent (string): Optional parent span name for hierarchy
     - attrs (object): Optional attribute key-value pairs

   Examples:
     {{ m::span("http.request") }}
     {{ m::span("db.query", parent="http.request") }}
     {{ m::span("api.call", attrs={"http.method": "GET", "http.status": "200"}) }}
     {{ m::span("transaction", parent="root", attrs={"tx.id": "123"}) }}

   Produces:
     [[expect.span]]
     name = "http.request"

     [[expect.span]]
     name = "db.query"
     parent = "http.request"

     [[expect.span]]
     name = "api.call"
     attrs.all = { "http.method" = "GET", "http.status" = "200" }

     [[expect.span]]
     name = "transaction"
     parent = "root"
     attrs.all = { "tx.id" = "123" }
============================================================================ #}
{% macro span(name, parent="", attrs) -%}
[[expect.span]]
name = "{{ name }}"
{%- if parent %}
parent = "{{ parent }}"
{%- endif %}
{%- if attrs and attrs | length > 0 %}
attrs.all = { {% for k, v in attrs %}"{{ k }}" = "{{ v }}"{% if not loop.last %}, {% endif %}{% endfor %} }
{%- endif %}
{%- endmacro %}

{# ============================================================================
   MACRO: service(id, image, args, env)

   Generate [service.<id>] block for container service definition.
   This is the SECOND most critical macro - every test needs services.

   Parameters:
     - id (string): Service identifier
     - image (string): Docker image name
     - args (array): Optional container arguments
     - env (object): Optional environment variables

   Examples:
     {{ m::service("postgres", "postgres:15") }}
     {{ m::service("api", "nginx:alpine", args=["nginx", "-g", "daemon off;"]) }}
     {{ m::service("redis", "redis:7", env={"REDIS_PASSWORD": "secret"}) }}
     {{ m::service("web", "myapp:latest", args=["--port", "8080"], env={"DEBUG": "true"}) }}

   Produces:
     [service.postgres]
     plugin = "generic_container"
     image = "postgres:15"

     [service.api]
     plugin = "generic_container"
     image = "nginx:alpine"
     args = ["nginx", "-g", "daemon off;"]

     [service.redis]
     plugin = "generic_container"
     image = "redis:7"
     env.REDIS_PASSWORD = "secret"

     [service.web]
     plugin = "generic_container"
     image = "myapp:latest"
     args = ["--port", "8080"]
     env.DEBUG = "true"
============================================================================ #}
{% macro service(id, image, args, env) -%}
[service.{{ id }}]
plugin = "generic_container"
image = "{{ image }}"
{%- if args and args | length > 0 %}
args = [{% for arg in args %}"{{ arg }}"{% if not loop.last %}, {% endif %}{% endfor %}]
{%- endif %}
{%- if env and env | length > 0 %}
{% for k, v in env -%}
env.{{ k }} = "{{ v }}"
{% endfor -%}
{%- endif %}
{%- endmacro %}

{# ============================================================================
   MACRO: scenario(name, service, cmd, expect_success=true)

   Generate [[scenario]] block for test execution.
   This is the THIRD most critical macro - every test needs scenarios.

   Parameters:
     - name (string): Scenario name
     - service (string): Service to run command in
     - cmd (string): Command to execute
     - expect_success (bool): Whether command should succeed (default: true)

   Examples:
     {{ m::scenario("check_health", "api", "curl localhost:8080/health") }}
     {{ m::scenario("run_migration", "postgres", "psql -c 'SELECT 1'") }}
     {{ m::scenario("fail_test", "app", "exit 1", expect_success=false) }}

   Produces:
     [[scenario]]
     name = "check_health"
     service = "api"
     run = "curl localhost:8080/health"
     expect_success = true

     [[scenario]]
     name = "run_migration"
     service = "postgres"
     run = "psql -c 'SELECT 1'"
     expect_success = true

     [[scenario]]
     name = "fail_test"
     service = "app"
     run = "exit 1"
     expect_success = false
============================================================================ #}
{% macro scenario(name, service, cmd, expect_success=true) -%}
[[scenario]]
name = "{{ name }}"
service = "{{ service }}"
run = "{{ cmd }}"
expect_success = {{ expect_success }}
{%- endmacro %}

{# ============================================================================
   ADVANCED MACROS (Issue #7)

   These macros provide advanced patterns for OpenTelemetry span validation,
   service relationships, and complex test scenarios.
============================================================================ #}

{# ============================================================================
   MACRO: span_exists(name)

   Simple span existence validation without attributes or parent.
   Use when you only need to verify a span was created.

   Parameters:
     - name (string): Span name to validate exists

   Example:
     {{ m::span_exists("http.server") }}
     {{ m::span_exists("database.query") }}

   Produces:
     [[expect.span]]
     name = "http.server"
     exists = true

     [[expect.span]]
     name = "database.query"
     exists = true
============================================================================ #}
{% macro span_exists(name) -%}
[[expect.span]]
name = "{{ name }}"
exists = true
{%- endmacro %}

{# ============================================================================
   MACRO: graph_relationship(parent, child, relationship="calls")

   Define parent-child relationships in the span graph.
   Use for validating service call hierarchies and dependencies.

   Parameters:
     - parent (string): Parent span name
     - child (string): Child span name
     - relationship (string): Relationship type (default: "calls")

   Examples:
     {{ m::graph_relationship("api.handler", "db.query") }}
     {{ m::graph_relationship("frontend", "backend", relationship="depends_on") }}
     {{ m::graph_relationship("service_a", "service_b", relationship="invokes") }}

   Produces:
     [[expect.graph]]
     parent = "api.handler"
     child = "db.query"
     relationship = "calls"

     [[expect.graph]]
     parent = "frontend"
     child = "backend"
     relationship = "depends_on"

     [[expect.graph]]
     parent = "service_a"
     child = "service_b"
     relationship = "invokes"
============================================================================ #}
{% macro graph_relationship(parent, child, relationship="calls") -%}
[[expect.graph]]
parent = "{{ parent }}"
child = "{{ child }}"
relationship = "{{ relationship }}"
{%- endmacro %}

{# ============================================================================
   MACRO: temporal_ordering(before, after)

   Validate temporal ordering of spans (before happened before after).
   Use for ensuring correct execution sequence.

   Parameters:
     - before (string): Span that should occur first
     - after (string): Span that should occur second

   Examples:
     {{ m::temporal_ordering("auth.login", "api.request") }}
     {{ m::temporal_ordering("db.connect", "db.query") }}
     {{ m::temporal_ordering("cache.check", "db.fallback") }}

   Produces:
     [[expect.temporal]]
     before = "auth.login"
     after = "api.request"

     [[expect.temporal]]
     before = "db.connect"
     after = "db.query"

     [[expect.temporal]]
     before = "cache.check"
     after = "db.fallback"
============================================================================ #}
{% macro temporal_ordering(before, after) -%}
[[expect.temporal]]
before = "{{ before }}"
after = "{{ after }}"
{%- endmacro %}

{# ============================================================================
   MACRO: error_propagation(source, target)

   Validate error propagation from source span to target span.
   Use for testing error handling and error context propagation.

   Parameters:
     - source (string): Source span where error originates
     - target (string): Target span that should receive error context

   Examples:
     {{ m::error_propagation("db.query", "api.handler") }}
     {{ m::error_propagation("external.api", "retry.handler") }}

   Produces:
     [[expect.span]]
     name = "db.query"
     attrs.all = { "error" = "true" }

     [[expect.span]]
     name = "api.handler"
     attrs.all = { "error.source" = "db.query" }

     [[expect.span]]
     name = "external.api"
     attrs.all = { "error" = "true" }

     [[expect.span]]
     name = "retry.handler"
     attrs.all = { "error.source" = "external.api" }
============================================================================ #}
{% macro error_propagation(source, target) -%}
[[expect.span]]
name = "{{ source }}"
attrs.all = { "error" = "true" }

[[expect.span]]
name = "{{ target }}"
attrs.all = { "error.source" = "{{ source }}" }
{%- endmacro %}

{# ============================================================================
   MACRO: service_interaction(client, server, method="POST")

   Validate service-to-service interaction with HTTP method.
   Use for testing microservice communication patterns.

   Parameters:
     - client (string): Client service span name
     - server (string): Server service span name
     - method (string): HTTP method (default: "POST")

   Examples:
     {{ m::service_interaction("frontend", "api") }}
     {{ m::service_interaction("api", "database", method="GET") }}
     {{ m::service_interaction("service_a", "service_b", method="PUT") }}

   Produces:
     [[expect.graph]]
     parent = "frontend"
     child = "api"
     attrs.all = { "http.method" = "POST" }

     [[expect.graph]]
     parent = "api"
     child = "database"
     attrs.all = { "http.method" = "GET" }

     [[expect.graph]]
     parent = "service_a"
     child = "service_b"
     attrs.all = { "http.method" = "PUT" }
============================================================================ #}
{% macro service_interaction(client, server, method="POST") -%}
[[expect.graph]]
parent = "{{ client }}"
child = "{{ server }}"
attrs.all = { "http.method" = "{{ method }}" }
{%- endmacro %}

{# ============================================================================
   MACRO: attribute_validation(span, key, value)

   Validate specific attribute key-value pair in a span.
   Use for testing span metadata and context propagation.

   Parameters:
     - span (string): Span name to validate
     - key (string): Attribute key
     - value (string): Expected attribute value

   Examples:
     {{ m::attribute_validation("http.request", "http.status_code", "200") }}
     {{ m::attribute_validation("db.query", "db.system", "postgresql") }}
     {{ m::attribute_validation("cache.hit", "cache.key", "user:123") }}

   Produces:
     [[expect.span]]
     name = "http.request"
     attrs.all = { "http.status_code" = "200" }

     [[expect.span]]
     name = "db.query"
     attrs.all = { "db.system" = "postgresql" }

     [[expect.span]]
     name = "cache.hit"
     attrs.all = { "cache.key" = "user:123" }
============================================================================ #}
{% macro attribute_validation(span, key, value) -%}
[[expect.span]]
name = "{{ span }}"
attrs.all = { "{{ key }}" = "{{ value }}" }
{%- endmacro %}

{# ============================================================================
   MACRO: resource_check(type, name)

   Validate resource existence in the system.
   Use for testing resource creation and lifecycle management.

   Parameters:
     - type (string): Resource type (e.g., "container", "network", "volume")
     - name (string): Resource name or identifier

   Examples:
     {{ m::resource_check("container", "postgres_db") }}
     {{ m::resource_check("network", "test_network") }}
     {{ m::resource_check("volume", "data_volume") }}

   Produces:
     [[expect.resource]]
     type = "container"
     name = "postgres_db"
     exists = true

     [[expect.resource]]
     type = "network"
     name = "test_network"
     exists = true

     [[expect.resource]]
     type = "volume"
     name = "data_volume"
     exists = true
============================================================================ #}
{% macro resource_check(type, name) -%}
[[expect.resource]]
type = "{{ type }}"
name = "{{ name }}"
exists = true
{%- endmacro %}

{# ============================================================================
   MACRO: batch_validation(spans, condition)

   Apply same validation condition to multiple spans.
   Use for bulk validation of span properties.

   Parameters:
     - spans (array): List of span names
     - condition (string): TOML condition to apply (e.g., 'exists = true')

   Examples:
     {{ m::batch_validation(["span1", "span2", "span3"], "exists = true") }}
     {{ m::batch_validation(["api.call", "db.query"], 'attrs.all = { "error" = "false" }') }}

   Produces:
     [[expect.span]]
     name = "span1"
     exists = true

     [[expect.span]]
     name = "span2"
     exists = true

     [[expect.span]]
     name = "span3"
     exists = true

     [[expect.span]]
     name = "api.call"
     attrs.all = { "error" = "false" }

     [[expect.span]]
     name = "db.query"
     attrs.all = { "error" = "false" }
============================================================================ #}
{% macro batch_validation(spans, condition) -%}
{% for span in spans -%}
[[expect.span]]
name = "{{ span }}"
{{ condition }}
{% endfor -%}
{%- endmacro %}
