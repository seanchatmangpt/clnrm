[
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/13",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/13/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/13/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/13/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/13",
    "id": 3527049524,
    "node_id": "I_kwDOQCmyxs7SOoE0",
    "number": 13,
    "title": "AI features listed in help but crash with 'not installed' error",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:06:40Z",
    "updated_at": "2025-10-17T18:06:40Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# AI features listed in help but crash with \"not installed\" error\n\n## Summary\n\nMultiple AI-related commands (`ai-orchestrate`, `ai-predict`, `ai-optimize`, `ai-real`) appear in `clnrm --help` output but all crash with \"Feature requires clnrm-ai crate (not installed)\" error.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source with `cargo build --release`\n\n## Reproduction Steps\n\n### Test 1: Try ai-orchestrate command\n\n```bash\nclnrm ai-orchestrate --help\n```\n\n### Test 2: Try ai-predict command\n\n```bash\nclnrm ai-predict --help\n```\n\n### Test 3: Try ai-optimize command\n\n```bash\nclnrm ai-optimize --help\n```\n\n### Test 4: Try ai-real command\n\n```bash\nclnrm ai-real --help\n```\n\n### Test 5: Check available commands\n\n```bash\nclnrm --help | grep ai-\n```\n\n## Expected Behavior\n\n**Option A: If features are available:**\n```bash\n$ clnrm ai-orchestrate --help\n\nUsage: clnrm ai-orchestrate [OPTIONS] <TEST>\n\nAI-powered test orchestration and optimization\n\nOptions:\n  --model <MODEL>    AI model to use [default: gpt-4]\n  -h, --help         Print help\n```\n\n**Option B: If features require installation:**\n\nCommands should NOT appear in `clnrm --help` unless installed, OR should clearly indicate they require additional installation in the help output.\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm ai-orchestrate --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 2 Result:\n```bash\n$ clnrm ai-predict --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 3 Result:\n```bash\n$ clnrm ai-optimize --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 4 Result:\n```bash\n$ clnrm ai-real --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 5 Result:\n```bash\n$ clnrm --help | grep ai-\n  ai-orchestrate  AI-powered test orchestration\n  ai-predict      AI-powered predictive analytics\n  ai-optimize     AI-powered optimization\n  ai-real         Real AI intelligence using SurrealDB and Ollama\n\n# All listed as available but none work!\n```\n\n## Impact\n\n**Low-Medium** - Confusing UX:\n\n1. ‚ùå Commands appear available but crash on use\n2. ‚ùå No indication in help that they require extra installation\n3. ‚ùå `cargo install clnrm-ai` doesn't exist (crate not published)\n4. ‚ö†Ô∏è Creates false impression of AI capabilities\n5. ‚ö†Ô∏è README lists as \"üß™ Experimental\" but help suggests they work\n\n## Evidence\n\n**All AI commands crash:**\n```bash\n$ for cmd in ai-orchestrate ai-predict ai-optimize ai-real; do\n    echo \"=== $cmd ===\"\n    clnrm $cmd --help 2>&1 | head -1\ndone\n\n=== ai-orchestrate ===\nError: Feature requires clnrm-ai crate (not installed)\n\n=== ai-predict ===\nError: Feature requires clnrm-ai crate (not installed)\n\n=== ai-optimize ===\nError: Feature requires clnrm-ai crate (not installed)\n\n=== ai-real ===\nError: Feature requires clnrm-ai crate (not installed)\n```\n\n**clnrm-ai crate doesn't exist:**\n```bash\n$ cargo search clnrm-ai\n# No results\n\n$ cargo install clnrm-ai\nerror: could not find `clnrm-ai` in registry `crates.io`\n```\n\n## README Claims\n\n```markdown\nüß™ Experimental Plugins:\nüé≠ chaos_engine (controlled failure injection)\nü§ñ ai_test_generator (AI-powered test case generation)\n\nCommands:\n- ai-orchestrate  AI-powered test orchestration\n- ai-predict      AI-powered predictive analytics\n- ai-optimize     AI-powered optimization\n- ai-real         Real AI intelligence using SurrealDB and Ollama\n```\n\nREADME says \"Experimental\" but commands appear in help as if they're production-ready.\n\n## Suggested Fixes\n\n**Option 1: Don't register commands until installed**\n\nConditional command registration:\n```rust\n#[derive(Parser)]\npub enum Command {\n    Init(InitArgs),\n    Run(RunArgs),\n    // ... other commands\n\n    #[cfg(feature = \"ai\")]\n    AiOrchestrate(AiOrchestrateArgs),\n\n    #[cfg(feature = \"ai\")]\n    AiPredict(AiPredictArgs),\n\n    #[cfg(feature = \"ai\")]\n    AiOptimize(AiOptimizeArgs),\n\n    #[cfg(feature = \"ai\")]\n    AiReal(AiRealArgs),\n}\n```\n\nBuild with AI features:\n```bash\ncargo build --features ai\n```\n\n**Option 2: Show clear installation instructions in help**\n\n```rust\n// For commands requiring extra installation\npub fn check_ai_feature() -> Result<()> {\n    #[cfg(not(feature = \"ai\"))]\n    {\n        eprintln!(\"‚ùå AI features not installed\\n\");\n        eprintln!(\"To enable AI features:\");\n        eprintln!(\"  1. Rebuild with: cargo install clnrm --features ai\");\n        eprintln!(\"  2. Or install separate: cargo install clnrm-ai-plugin\");\n        eprintln!(\"\\nNote: AI features are experimental and require:\");\n        eprintln!(\"  - SurrealDB installed and running\");\n        eprintln!(\"  - Ollama installed with models\");\n        std::process::exit(1);\n    }\n    Ok(())\n}\n```\n\n**Option 3: Mark as disabled in help output**\n\n```bash\n$ clnrm --help\n\nCommands:\n  init         Initialize new project\n  run          Run tests\n  ...\n  ai-orchestrate [DISABLED - requires --features ai]\n  ai-predict     [DISABLED - requires --features ai]\n  ai-optimize    [DISABLED - requires --features ai]\n  ai-real        [DISABLED - requires --features ai]\n```\n\n**Option 4: Update README to clarify status**\n\n```markdown\n## üß™ Experimental Features (Disabled by Default)\n\nAI-powered features are available but require additional installation:\n\n### Prerequisites:\n```bash\n# Install SurrealDB\nbrew install surrealdb/tap/surreal\n\n# Install Ollama\nbrew install ollama\n\n# Rebuild clnrm with AI features\ncargo install clnrm --features ai\n```\n\n### Available AI Commands (after installation):\n- `ai-orchestrate` - AI-powered test orchestration\n- `ai-predict` - Predictive analytics\n- `ai-optimize` - Test optimization\n- `ai-real` - Real AI with SurrealDB + Ollama\n\n### Current Status:\n‚ùå Not included in default installation\n‚ùå Requires manual feature flag\nüß™ Experimental - API may change\n```\n\n**Option 5: Publish clnrm-ai as separate crate**\n\nMake the error message actually work:\n```bash\n# Publish plugin to crates.io\ncargo publish -p clnrm-ai\n\n# Users can then install\ncargo install clnrm-ai\n\n# Commands automatically available\nclnrm ai-orchestrate --help  # Now works\n```\n\n## Example Better UX\n\n**Current (confusing):**\n```bash\n$ clnrm --help\n  ai-orchestrate  AI-powered test orchestration  # Looks available\n\n$ clnrm ai-orchestrate\nError: Feature requires clnrm-ai crate (not installed)  # Surprise!\n\n$ cargo install clnrm-ai\nerror: could not find `clnrm-ai` in registry  # Dead end!\n```\n\n**Better (honest):**\n```bash\n$ clnrm --help\n  ai-orchestrate  AI-powered test orchestration [experimental - see docs]\n\n$ clnrm ai-orchestrate\n‚ùå AI features not installed\n\nTo enable experimental AI features:\n  cargo install clnrm --features ai\n\nSee: https://github.com/user/clnrm#ai-features\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n\n## Additional Context\n\nDiscovered during systematic feature testing. AI commands appear in help but all crash with \"not installed\" error. The suggested installation command doesn't work because the crate doesn't exist.\n\n**Root cause**: Commands are compiled into binary but feature-gated at runtime, creating confusing UX where commands appear available but crash.\n\n**Best practice**: Don't show commands in help unless they actually work. Use Cargo features to exclude commands at compile time, not runtime.\n\n**Severity**: Low - Features are clearly marked \"üß™ Experimental\" in README, but help output is misleading.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/13/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/13/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/12",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/12/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/12/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/12/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/12",
    "id": 3527049001,
    "node_id": "I_kwDOQCmyxs7SOn8p",
    "number": 12,
    "title": "AI features listed in help but crash with 'not installed' error",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217757,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:06:26Z",
    "updated_at": "2025-10-17T18:06:26Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# AI features listed in help but crash with \"not installed\" error\n\n## Summary\n\nMultiple AI-related commands (`ai-orchestrate`, `ai-predict`, `ai-optimize`, `ai-real`) appear in `clnrm --help` output but all crash with \"Feature requires clnrm-ai crate (not installed)\" error.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source with `cargo build --release`\n\n## Reproduction Steps\n\n### Test 1: Try ai-orchestrate command\n\n```bash\nclnrm ai-orchestrate --help\n```\n\n### Test 2: Try ai-predict command\n\n```bash\nclnrm ai-predict --help\n```\n\n### Test 3: Try ai-optimize command\n\n```bash\nclnrm ai-optimize --help\n```\n\n### Test 4: Try ai-real command\n\n```bash\nclnrm ai-real --help\n```\n\n### Test 5: Check available commands\n\n```bash\nclnrm --help | grep ai-\n```\n\n## Expected Behavior\n\n**Option A: If features are available:**\n```bash\n$ clnrm ai-orchestrate --help\n\nUsage: clnrm ai-orchestrate [OPTIONS] <TEST>\n\nAI-powered test orchestration and optimization\n\nOptions:\n  --model <MODEL>    AI model to use [default: gpt-4]\n  -h, --help         Print help\n```\n\n**Option B: If features require installation:**\n\nCommands should NOT appear in `clnrm --help` unless installed, OR should clearly indicate they require additional installation in the help output.\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm ai-orchestrate --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 2 Result:\n```bash\n$ clnrm ai-predict --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 3 Result:\n```bash\n$ clnrm ai-optimize --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 4 Result:\n```bash\n$ clnrm ai-real --help\n\nError: Feature requires clnrm-ai crate (not installed)\n\nTo install: cargo install clnrm-ai\n```\n\n### Test 5 Result:\n```bash\n$ clnrm --help | grep ai-\n  ai-orchestrate  AI-powered test orchestration\n  ai-predict      AI-powered predictive analytics\n  ai-optimize     AI-powered optimization\n  ai-real         Real AI intelligence using SurrealDB and Ollama\n\n# All listed as available but none work!\n```\n\n## Impact\n\n**Low-Medium** - Confusing UX:\n\n1. ‚ùå Commands appear available but crash on use\n2. ‚ùå No indication in help that they require extra installation\n3. ‚ùå `cargo install clnrm-ai` doesn't exist (crate not published)\n4. ‚ö†Ô∏è Creates false impression of AI capabilities\n5. ‚ö†Ô∏è README lists as \"üß™ Experimental\" but help suggests they work\n\n## Evidence\n\n**All AI commands crash:**\n```bash\n$ for cmd in ai-orchestrate ai-predict ai-optimize ai-real; do\n    echo \"=== $cmd ===\"\n    clnrm $cmd --help 2>&1 | head -1\ndone\n\n=== ai-orchestrate ===\nError: Feature requires clnrm-ai crate (not installed)\n\n=== ai-predict ===\nError: Feature requires clnrm-ai crate (not installed)\n\n=== ai-optimize ===\nError: Feature requires clnrm-ai crate (not installed)\n\n=== ai-real ===\nError: Feature requires clnrm-ai crate (not installed)\n```\n\n**clnrm-ai crate doesn't exist:**\n```bash\n$ cargo search clnrm-ai\n# No results\n\n$ cargo install clnrm-ai\nerror: could not find `clnrm-ai` in registry `crates.io`\n```\n\n## README Claims\n\n```markdown\nüß™ Experimental Plugins:\nüé≠ chaos_engine (controlled failure injection)\nü§ñ ai_test_generator (AI-powered test case generation)\n\nCommands:\n- ai-orchestrate  AI-powered test orchestration\n- ai-predict      AI-powered predictive analytics\n- ai-optimize     AI-powered optimization\n- ai-real         Real AI intelligence using SurrealDB and Ollama\n```\n\nREADME says \"Experimental\" but commands appear in help as if they're production-ready.\n\n## Suggested Fixes\n\n**Option 1: Don't register commands until installed**\n\nConditional command registration:\n```rust\n#[derive(Parser)]\npub enum Command {\n    Init(InitArgs),\n    Run(RunArgs),\n    // ... other commands\n\n    #[cfg(feature = \"ai\")]\n    AiOrchestrate(AiOrchestrateArgs),\n\n    #[cfg(feature = \"ai\")]\n    AiPredict(AiPredictArgs),\n\n    #[cfg(feature = \"ai\")]\n    AiOptimize(AiOptimizeArgs),\n\n    #[cfg(feature = \"ai\")]\n    AiReal(AiRealArgs),\n}\n```\n\nBuild with AI features:\n```bash\ncargo build --features ai\n```\n\n**Option 2: Show clear installation instructions in help**\n\n```rust\n// For commands requiring extra installation\npub fn check_ai_feature() -> Result<()> {\n    #[cfg(not(feature = \"ai\"))]\n    {\n        eprintln!(\"‚ùå AI features not installed\\n\");\n        eprintln!(\"To enable AI features:\");\n        eprintln!(\"  1. Rebuild with: cargo install clnrm --features ai\");\n        eprintln!(\"  2. Or install separate: cargo install clnrm-ai-plugin\");\n        eprintln!(\"\\nNote: AI features are experimental and require:\");\n        eprintln!(\"  - SurrealDB installed and running\");\n        eprintln!(\"  - Ollama installed with models\");\n        std::process::exit(1);\n    }\n    Ok(())\n}\n```\n\n**Option 3: Mark as disabled in help output**\n\n```bash\n$ clnrm --help\n\nCommands:\n  init         Initialize new project\n  run          Run tests\n  ...\n  ai-orchestrate [DISABLED - requires --features ai]\n  ai-predict     [DISABLED - requires --features ai]\n  ai-optimize    [DISABLED - requires --features ai]\n  ai-real        [DISABLED - requires --features ai]\n```\n\n**Option 4: Update README to clarify status**\n\n```markdown\n## üß™ Experimental Features (Disabled by Default)\n\nAI-powered features are available but require additional installation:\n\n### Prerequisites:\n```bash\n# Install SurrealDB\nbrew install surrealdb/tap/surreal\n\n# Install Ollama\nbrew install ollama\n\n# Rebuild clnrm with AI features\ncargo install clnrm --features ai\n```\n\n### Available AI Commands (after installation):\n- `ai-orchestrate` - AI-powered test orchestration\n- `ai-predict` - Predictive analytics\n- `ai-optimize` - Test optimization\n- `ai-real` - Real AI with SurrealDB + Ollama\n\n### Current Status:\n‚ùå Not included in default installation\n‚ùå Requires manual feature flag\nüß™ Experimental - API may change\n```\n\n**Option 5: Publish clnrm-ai as separate crate**\n\nMake the error message actually work:\n```bash\n# Publish plugin to crates.io\ncargo publish -p clnrm-ai\n\n# Users can then install\ncargo install clnrm-ai\n\n# Commands automatically available\nclnrm ai-orchestrate --help  # Now works\n```\n\n## Example Better UX\n\n**Current (confusing):**\n```bash\n$ clnrm --help\n  ai-orchestrate  AI-powered test orchestration  # Looks available\n\n$ clnrm ai-orchestrate\nError: Feature requires clnrm-ai crate (not installed)  # Surprise!\n\n$ cargo install clnrm-ai\nerror: could not find `clnrm-ai` in registry  # Dead end!\n```\n\n**Better (honest):**\n```bash\n$ clnrm --help\n  ai-orchestrate  AI-powered test orchestration [experimental - see docs]\n\n$ clnrm ai-orchestrate\n‚ùå AI features not installed\n\nTo enable experimental AI features:\n  cargo install clnrm --features ai\n\nSee: https://github.com/user/clnrm#ai-features\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n\n## Additional Context\n\nDiscovered during systematic feature testing. AI commands appear in help but all crash with \"not installed\" error. The suggested installation command doesn't work because the crate doesn't exist.\n\n**Root cause**: Commands are compiled into binary but feature-gated at runtime, creating confusing UX where commands appear available but crash.\n\n**Best practice**: Don't show commands in help unless they actually work. Use Cargo features to exclude commands at compile time, not runtime.\n\n**Severity**: Low - Features are clearly marked \"üß™ Experimental\" in README, but help output is misleading.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/12/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/12/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/11",
    "id": 3527048697,
    "node_id": "I_kwDOQCmyxs7SOn35",
    "number": 11,
    "title": "analyze command requires undocumented OTEL collector setup",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217757,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:06:17Z",
    "updated_at": "2025-10-17T18:06:17Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# `analyze` command requires undocumented OTEL collector setup\n\n## Summary\n\nREADME claims `clnrm analyze test.toml traces.json - Validate telemetry evidence` as a working command, but running it reveals it requires an OpenTelemetry collector setup that is not documented.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Try analyze command as documented\n\n```bash\nclnrm analyze tests/basic.clnrm.toml traces.json\n```\n\n### Test 2: Check help for requirements\n\n```bash\nclnrm analyze --help\n```\n\n### Test 3: Look for traces.json after test run\n\n```bash\nclnrm run tests/basic.clnrm.toml\nls -la traces.json\n```\n\n### Test 4: Try with non-existent trace file\n\n```bash\nclnrm analyze tests/basic.clnrm.toml /tmp/nonexistent.json\n```\n\n## Expected Behavior\n\nBased on README documentation:\n\n```markdown\n### ‚úÖ Telemetry Analysis (v1.0)\n\nCommands:\n- `clnrm analyze test.toml traces.json` - Validate telemetry evidence\n- Verifies OTEL spans match expectations\n- 7-layer fake-green detection\n\nExample:\n```bash\n# Run test and capture traces\n$ clnrm run tests/test.clnrm.toml\n\n# Analyze traces\n$ clnrm analyze tests/test.clnrm.toml traces.json\n‚úÖ All spans validated\n‚úÖ Graph relationships correct\n‚úÖ Temporal ordering verified\n‚úÖ No fake-green patterns detected\n```\n\nExpected to work with traces captured during test execution.\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm analyze tests/basic.clnrm.toml traces.json\n\nError: ValidationError: File not found: traces.json\n\nHint: Run tests with OTEL collector enabled to capture traces\n```\n\n### Test 2 Result:\n```bash\n$ clnrm analyze --help\n\nUsage: clnrm analyze [OPTIONS]\n\nOptions:\n  -h, --help  Print help\n\n# No mention of required setup!\n```\n\n### Test 3 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml\n‚úÖ basic.clnrm.toml - PASS (288ms)\n\n$ ls -la traces.json\nls: traces.json: No such file or directory\n\n# No traces.json generated during test run\n```\n\n### Test 4 Result:\n```bash\n$ clnrm analyze tests/basic.clnrm.toml /tmp/nonexistent.json\n\nError: ValidationError: File not found: /tmp/nonexistent.json\n```\n\n## Impact\n\n**Medium** - Core validation feature not usable:\n\n1. ‚ùå Cannot validate \"fake-green detection\" (main CLNRM selling point)\n2. ‚ùå No documentation on OTEL collector setup\n3. ‚ùå Tests don't automatically generate traces\n4. ‚ùå Feature claimed as working but requires undocumented infrastructure\n5. ‚ö†Ô∏è No clear path to actually use this feature\n\n## Missing Documentation\n\nThe `analyze` command requires:\n\n1. **OpenTelemetry Collector** running and configured\n2. **OTLP exporter** in test configuration\n3. **Trace file export** from collector\n4. **Proper collector pipeline** configuration\n\nNone of this is documented in the README.\n\n## Evidence\n\n**No OTEL collector in default setup:**\n```bash\n# Check for running collector\n$ ps aux | grep otel\n# No results\n\n# Check for collector config\n$ find . -name \"*otel*config*\"\n# No results\n```\n\n**Test files don't export traces:**\n```bash\n$ grep -r \"otlp\\|exporter\\|trace\" tests/\n# No OTEL configuration in test files\n```\n\n**No setup documentation:**\n```bash\n$ grep -r \"collector\\|OTEL.*setup\" docs/ README.md\n# No setup instructions found\n```\n\n## What's Missing\n\n### 1. OTEL Collector Setup\n```yaml\n# otel-collector-config.yaml (NOT PROVIDED)\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"0.0.0.0:4318\"\n\nexporters:\n  file:\n    path: ./traces.json\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [file]\n```\n\n### 2. Test File OTEL Configuration\n```toml\n# Example test.clnrm.toml (NOT DOCUMENTED)\n[otel]\nexporter = \"otlp\"\nendpoint = \"http://localhost:4318\"\n\n[[scenario]]\nname = \"test\"\nrun = \"echo test\"\n```\n\n### 3. Collector Startup\n```bash\n# NOT DOCUMENTED\notelcol --config=otel-collector-config.yaml &\n```\n\n## Suggested Fixes\n\n**Option 1: Provide complete setup documentation**\n\nCreate `docs/OTEL_SETUP.md`:\n```markdown\n# OpenTelemetry Collector Setup for CLNRM\n\n## Prerequisites\n```bash\n# Install OTEL collector\nbrew install opentelemetry-collector\n\n# Or download binary\ncurl -L https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.91.0/otelcol_0.91.0_darwin_amd64.tar.gz | tar xz\n```\n\n## Configuration\n\n1. Create `otel-collector-config.yaml`:\n```yaml\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"0.0.0.0:4318\"\n      grpc:\n        endpoint: \"0.0.0.0:4317\"\n\nexporters:\n  file:\n    path: ./traces.json\n    format: json\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [file]\n```\n\n2. Start collector:\n```bash\notelcol --config=otel-collector-config.yaml\n```\n\n3. Configure tests:\n```toml\n[otel]\nexporter = \"otlp\"\nendpoint = \"http://localhost:4318\"\n```\n\n4. Run and analyze:\n```bash\nclnrm run tests/test.clnrm.toml\nclnrm analyze tests/test.clnrm.toml traces.json\n```\n```\n\n**Option 2: Auto-generate traces without collector**\n\nMake CLNRM capture traces internally:\n```rust\n// In test runner\npub fn run_with_trace_capture(test: &Path) -> Result<TestResults> {\n    let tracer = init_internal_tracer()?;\n\n    let results = run_test(test)?;\n\n    // Export traces to JSON\n    export_traces(\"traces.json\")?;\n\n    Ok(results)\n}\n```\n\nUsage becomes simple:\n```bash\n# Automatically generates traces.json\nclnrm run tests/test.toml\n\n# Analyze captured traces\nclnrm analyze tests/test.toml traces.json\n```\n\n**Option 3: Make collector optional**\n\n```bash\n# Works without collector (basic validation)\nclnrm analyze tests/test.toml\n\n# Works with collector (full OTEL validation)\nclnrm analyze tests/test.toml traces.json\n\n# Auto-setup mode (starts collector if not running)\nclnrm analyze tests/test.toml --auto-setup\n```\n\n**Option 4: Update README to reflect requirements**\n\n```markdown\n### ‚ö†Ô∏è Telemetry Analysis (Requires Setup)\n\n**Status**: Command exists but requires OpenTelemetry collector setup\n\n**Prerequisites:**\n1. Install OpenTelemetry collector\n2. Configure OTLP endpoint\n3. Export traces to JSON file\n4. See [OTEL Setup Guide](docs/OTEL_SETUP.md)\n\n**Current limitation**: Cannot use fake-green detection without OTEL infrastructure.\n\n**Planned**: Auto-capture traces without external collector (v1.1)\n```\n\n## Example Complete Workflow (If Documented)\n\n```bash\n# 1. Install OTEL collector\nbrew install opentelemetry-collector\n\n# 2. Start collector\ncat > otel-config.yaml <<EOF\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"0.0.0.0:4318\"\nexporters:\n  file:\n    path: ./traces.json\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [file]\nEOF\n\notelcol --config=otel-config.yaml &\n\n# 3. Configure test\ncat > test.clnrm.toml <<EOF\n[otel]\nexporter = \"otlp\"\nendpoint = \"http://localhost:4318\"\n\n[[scenario]]\nname = \"test\"\nrun = \"echo test\"\n\n[[expect.span]]\nname = \"test.execution\"\nexists = true\nEOF\n\n# 4. Run test\nclnrm run test.clnrm.toml\n\n# 5. Analyze traces\nclnrm analyze test.clnrm.toml traces.json\n‚úÖ All spans validated\n‚úÖ No fake-green patterns detected\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n- #1 Container isolation not working (another setup issue)\n\n## Additional Context\n\nDiscovered during systematic feature testing. The `analyze` command is the core of CLNRM's \"fake-green detection\" value proposition, but it cannot be used without undocumented OTEL collector infrastructure.\n\n**Severity**: Medium - Feature exists but is unusable without setup documentation.\n\n**Root cause**: OTEL collector setup is assumed knowledge, not documented in README or quick start guide.\n\n**User impact**: Cannot use CLNRM's main differentiating feature (fake-green detection) without significant undocumented setup work.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/10",
    "id": 3527048397,
    "node_id": "I_kwDOQCmyxs7SOnzN",
    "number": 10,
    "title": "SHA-256 digest output missing despite reproducibility claims",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217759,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-Xw",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:06:09Z",
    "updated_at": "2025-10-17T18:06:09Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# SHA-256 digest output missing despite reproducibility claims\n\n## Summary\n\nREADME claims \"SHA-256 digests - Reproducibility verification\" as a ‚úÖ v1.0 feature under \"Multi-Format Reporting\", but no SHA-256 digest files are generated after test runs.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Run test and look for digest file\n\n```bash\n# Run basic test\nclnrm run tests/basic.clnrm.toml\n\n# Look for digest file\nls -la *.sha256\nls -la tests/*.sha256\nfind . -name \"*.sha256\" -o -name \"*digest*\"\n```\n\n### Test 2: Check for --digest flag\n\n```bash\nclnrm run --help | grep -i digest\nclnrm run --help | grep -i sha\n```\n\n### Test 3: Run with verbose output\n\n```bash\nclnrm run tests/basic.clnrm.toml --verbose\n# Check if digest mentioned in output\n```\n\n### Test 4: Look for digest in JSON output\n\n```bash\nclnrm run tests/basic.clnrm.toml --format json | jq '.digest // .sha256 // .hash'\n```\n\n## Expected Behavior\n\nBased on README claims:\n\n```markdown\n### ‚úÖ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing\n- JUnit XML - CI/CD integration\n- SHA-256 digests - Reproducibility verification\n\n**Reproducibility Features:**\n- SHA-256 digests of test execution for verification\n- Deterministic test ordering\n- Reproducible results across environments\n\nExample:\n```bash\n$ clnrm run tests/test.clnrm.toml\n\n‚úÖ test.clnrm.toml - PASS (288ms)\nüìÑ Report: test.clnrm.json\nüîê Digest: test.clnrm.sha256\n\n$ cat test.clnrm.sha256\na1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0\n```\n\nExpected digest file contents:\n```\na1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0  test.clnrm.toml\nb2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2  test.clnrm.json\n```\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml\n‚úÖ basic.clnrm.toml - PASS (288ms)\n\n$ ls -la *.sha256\nls: *.sha256: No such file or directory\n\n$ find . -name \"*.sha256\" -o -name \"*digest*\"\n# No results\n```\n\n### Test 2 Result:\n```bash\n$ clnrm run --help | grep -i digest\n# No results\n\n$ clnrm run --help | grep -i sha\n# No results\n```\n\n### Test 3 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml --verbose\nRunning 1 scenario(s)...\nüöÄ Executing test: basic_test\n[... test output ...]\n‚úÖ basic.clnrm.toml - PASS (288ms)\n\n# No mention of digest generation\n```\n\n### Test 4 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml --format json | jq '.digest // .sha256 // .hash'\nnull\n\n# JSON output contains no digest field\n```\n\n## Impact\n\n**Low-Medium** - Reproducibility verification missing:\n\n1. ‚ùå Cannot verify test execution reproducibility\n2. ‚ùå Cannot detect if test files were modified\n3. ‚ùå Cannot share test results with integrity proof\n4. ‚ùå Claimed v1.0 stable feature doesn't exist\n5. ‚ö†Ô∏è Workaround exists (manual sha256sum)\n\n## Current Workaround\n\n```bash\n# Manually generate SHA-256 digest\nsha256sum tests/*.clnrm.toml > test-digests.sha256\n\n# Verify later\nsha256sum -c test-digests.sha256\n```\n\nThis defeats the purpose of automatic reproducibility verification.\n\n## Evidence\n\n**No digest output in any format:**\n```bash\n# Text output\n$ clnrm run tests/test.toml\n‚úÖ test.clnrm.toml - PASS (288ms)\n# No digest shown\n\n# JSON output\n$ clnrm run tests/test.toml --format json\n{\n  \"status\": \"PASS\",\n  \"duration\": 288,\n  \"scenarios\": [...]\n  // No digest field\n}\n```\n\n**No digest generation code:**\n```bash\n$ grep -r \"sha256\\|digest\\|hash\" /tmp/clnrm-src/src/report/\n# No results - digest generation not implemented\n```\n\n## Suggested Fixes\n\n**Option 1: Implement SHA-256 digest generation**\n\nAdd to `src/report/mod.rs`:\n```rust\nuse sha2::{Sha256, Digest};\nuse std::fs::File;\nuse std::io::{Read, Write};\n\npub fn generate_test_digest(test_file: &Path, results: &TestResults) -> Result<String> {\n    let mut hasher = Sha256::new();\n\n    // Hash test file\n    let mut test_content = Vec::new();\n    File::open(test_file)?.read_to_end(&mut test_content)?;\n    hasher.update(&test_content);\n\n    // Hash results (for reproducibility)\n    let results_json = serde_json::to_vec(&results)?;\n    hasher.update(&results_json);\n\n    // Hash timestamp for uniqueness\n    hasher.update(chrono::Utc::now().to_rfc3339().as_bytes());\n\n    Ok(format!(\"{:x}\", hasher.finalize()))\n}\n\npub fn write_digest_file(test_file: &Path, digest: &str) -> Result<()> {\n    let digest_path = test_file.with_extension(\"clnrm.sha256\");\n    let mut file = File::create(&digest_path)?;\n    writeln!(file, \"{}  {}\", digest, test_file.display())?;\n    Ok(())\n}\n```\n\nAdd CLI flag:\n```rust\n#[derive(Parser)]\npub struct RunArgs {\n    // ... existing fields\n\n    /// Generate SHA-256 digest file\n    #[arg(long)]\n    digest: bool,\n}\n```\n\nUsage:\n```bash\n$ clnrm run tests/test.toml --digest\n‚úÖ test.clnrm.toml - PASS (288ms)\nüîê Digest: a1b2c3d4...c9d0 (test.clnrm.sha256)\n\n$ cat test.clnrm.sha256\na1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0  tests/test.clnrm.toml\n```\n\nDependencies:\n```toml\n[dependencies]\nsha2 = \"0.10\"\n```\n\n**Option 2: Update README to reflect reality**\n```markdown\n### ‚úÖ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing ‚úÖ\n- ‚ö†Ô∏è Text reports - Human-readable output ‚úÖ\n\n### üöß Planned Features (v1.1)\n- JUnit XML - CI/CD integration (planned)\n- SHA-256 digests - Reproducibility verification (planned)\n\nCurrent reproducibility approach:\n```bash\n# Manually verify test file integrity\nsha256sum tests/*.clnrm.toml > digests.sha256\nsha256sum -c digests.sha256\n```\n```\n\n**Option 3: Minimal implementation**\n\nGenerate digest in JSON output only:\n```rust\n// In report generation\nlet digest = generate_test_digest(test_file, &results)?;\n\nlet output = json!({\n    \"status\": results.status,\n    \"duration\": results.duration,\n    \"digest\": digest,  // Add this field\n    \"scenarios\": results.scenarios\n});\n```\n\nUsage:\n```bash\n$ clnrm run tests/test.toml --format json | jq '.digest'\n\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0\"\n```\n\n## Use Cases for Digest Feature\n\n### 1. Reproducibility Verification\n```bash\n# First run\n$ clnrm run tests/test.toml --digest\nDigest: a1b2c3d4...\n\n# Later run (same test, same results)\n$ clnrm run tests/test.toml --digest\nDigest: a1b2c3d4...  # Same digest = reproducible\n\n# Modified test\n$ clnrm run tests/test.toml --digest\nDigest: b2c3d4e5...  # Different digest = test changed\n```\n\n### 2. Test Integrity in CI/CD\n```bash\n# Developer creates test with known good digest\n$ clnrm run tests/critical.toml --digest > critical.sha256\n\n# CI pipeline verifies digest matches\n$ clnrm run tests/critical.toml --digest | diff - critical.sha256\n```\n\n### 3. Sharing Test Results\n```bash\n# Share test results with proof of integrity\n$ clnrm run tests/test.toml --digest --format json > results.json\n$ sha256sum results.json\nb2c3d4e5...\n\n# Recipient can verify\n$ sha256sum -c results.sha256\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n- #9 JUnit XML missing (related reporting feature)\n\n## Additional Context\n\nDiscovered during systematic audit of reporting features. SHA-256 digests are claimed as a reproducibility feature but no digest files are generated.\n\n**Implementation effort**: Low - `sha2` crate available, simple file output.\n\n**Priority**: Low - Nice to have but not critical. Manual `sha256sum` works as workaround.\n\n**Severity**: Documentation issue - Feature is claimed but doesn't exist.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/9",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/9/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/9/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/9/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/9",
    "id": 3527048119,
    "node_id": "I_kwDOQCmyxs7SOnu3",
    "number": 9,
    "title": "JUnit XML report generation missing despite ‚úÖ v1.0 claim",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217759,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-Xw",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:06:02Z",
    "updated_at": "2025-10-17T18:06:02Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# JUnit XML report generation missing despite ‚úÖ v1.0 claim\n\n## Summary\n\nREADME claims \"JUnit XML - CI/CD integration\" as a ‚úÖ v1.0 working feature under \"Multi-Format Reporting\", but the `--report-junit` flag doesn't exist.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Try --report-junit flag\n\n```bash\nclnrm run tests/basic.clnrm.toml --report-junit junit.xml\n```\n\n### Test 2: Try --format junit\n\n```bash\nclnrm run tests/basic.clnrm.toml --format junit\n```\n\n### Test 3: Check available output formats\n\n```bash\nclnrm run --help | grep -A 5 \"format\\|output\"\n```\n\n### Test 4: Look for JUnit support in code\n\n```bash\ngit clone https://github.com/seanchatmangpt/clnrm /tmp/clnrm-src\ngrep -r \"junit\\|JUnit\" /tmp/clnrm-src/src/\n```\n\n## Expected Behavior\n\nBased on README claims:\n\n```markdown\n### ‚úÖ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing\n- JUnit XML - CI/CD integration\n- SHA-256 digests - Reproducibility verification\n\nExample usage:\n```bash\n# Generate JUnit XML for CI/CD\nclnrm run tests/ --report-junit junit.xml\n\n# Jenkins/GitLab CI integration\nclnrm run tests/ --format junit > test-results.xml\n```\n\nExpected output:\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <testsuite name=\"clnrm\" tests=\"5\" failures=\"0\" errors=\"0\" time=\"1.234\">\n    <testcase classname=\"basic_test\" name=\"scenario_1\" time=\"0.288\"/>\n    <testcase classname=\"basic_test\" name=\"scenario_2\" time=\"0.301\"/>\n    ...\n  </testsuite>\n</testsuites>\n```\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml --report-junit junit.xml\n\nerror: unexpected argument '--report-junit' found\n\nUsage: clnrm run [OPTIONS] <PATH>\n\nFor more information, try '--help'.\n```\n\n### Test 2 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml --format junit\n\nerror: invalid value 'junit' for '--format <FORMAT>'\n  [possible values: text, json]\n\nFor more information, try '--help'.\n```\n\n### Test 3 Result:\n```bash\n$ clnrm run --help | grep -A 5 \"format\"\n\n  -f, --format <FORMAT>\n          Output format [default: text] [possible values: text, json]\n\n# No junit option listed\n```\n\n### Test 4 Result:\n```bash\n$ grep -r \"junit\\|JUnit\" /tmp/clnrm-src/src/\n# No results - JUnit support not implemented\n```\n\n## Impact\n\n**Medium** - CI/CD integration blocker:\n\n1. ‚ùå Cannot integrate with Jenkins (expects JUnit XML)\n2. ‚ùå Cannot integrate with GitLab CI (expects JUnit XML)\n3. ‚ùå Cannot integrate with GitHub Actions test reporting\n4. ‚ùå Claimed v1.0 stable feature doesn't exist\n5. ‚ö†Ô∏è Workaround exists but requires custom parsing\n\n## Current Workaround\n\n```bash\n# Use JSON output and convert to JUnit XML manually\nclnrm run tests/ --format json > results.json\n\n# Then convert with external tool (not provided)\npython convert_to_junit.py results.json > junit.xml\n```\n\nThis defeats the purpose of \"CI/CD integration\" claim.\n\n## Evidence\n\n**Only 2 output formats available:**\n```bash\n$ clnrm run --help\n  -f, --format <FORMAT>\n          Output format [default: text] [possible values: text, json]\n```\n\n**No JUnit XML code in source:**\n```bash\n$ find /tmp/clnrm-src -name \"*.rs\" -exec grep -l \"junit\" {} \\;\n# No results\n```\n\n## Suggested Fixes\n\n**Option 1: Implement JUnit XML output**\n\nAdd to `src/report/mod.rs`:\n```rust\npub mod junit;\n\nuse quick_xml::Writer;\nuse quick_xml::events::{Event, BytesStart, BytesEnd, BytesText};\n\npub fn write_junit_xml(results: &TestResults, path: &Path) -> Result<()> {\n    let mut writer = Writer::new_with_indent(File::create(path)?, b' ', 2);\n\n    // <testsuites>\n    writer.write_event(Event::Start(BytesStart::new(\"testsuites\")))?;\n\n    // <testsuite name=\"...\" tests=\"...\" failures=\"...\" time=\"...\">\n    let mut testsuite = BytesStart::new(\"testsuite\");\n    testsuite.push_attribute((\"name\", \"clnrm\"));\n    testsuite.push_attribute((\"tests\", &results.total.to_string()));\n    testsuite.push_attribute((\"failures\", &results.failures.to_string()));\n    testsuite.push_attribute((\"errors\", &results.errors.to_string()));\n    testsuite.push_attribute((\"time\", &results.duration.as_secs_f64().to_string()));\n    writer.write_event(Event::Start(testsuite))?;\n\n    // <testcase> for each scenario\n    for scenario in &results.scenarios {\n        let mut testcase = BytesStart::new(\"testcase\");\n        testcase.push_attribute((\"classname\", scenario.file.as_str()));\n        testcase.push_attribute((\"name\", scenario.name.as_str()));\n        testcase.push_attribute((\"time\", &scenario.duration.as_secs_f64().to_string()));\n\n        if let Some(failure) = &scenario.failure {\n            writer.write_event(Event::Start(testcase))?;\n\n            // <failure message=\"...\" type=\"...\">\n            let mut failure_elem = BytesStart::new(\"failure\");\n            failure_elem.push_attribute((\"message\", failure.message.as_str()));\n            failure_elem.push_attribute((\"type\", failure.error_type.as_str()));\n            writer.write_event(Event::Start(failure_elem))?;\n            writer.write_event(Event::Text(BytesText::new(&failure.details)))?;\n            writer.write_event(Event::End(BytesEnd::new(\"failure\")))?;\n\n            writer.write_event(Event::End(BytesEnd::new(\"testcase\")))?;\n        } else {\n            writer.write_event(Event::Empty(testcase))?;\n        }\n    }\n\n    writer.write_event(Event::End(BytesEnd::new(\"testsuite\")))?;\n    writer.write_event(Event::End(BytesEnd::new(\"testsuites\")))?;\n\n    Ok(())\n}\n```\n\nAdd CLI flag:\n```rust\n#[derive(Parser)]\npub struct RunArgs {\n    // ... existing fields\n\n    /// Generate JUnit XML report\n    #[arg(long, value_name = \"FILE\")]\n    report_junit: Option<PathBuf>,\n}\n```\n\nDependencies:\n```toml\n[dependencies]\nquick-xml = \"0.31\"\n```\n\n**Option 2: Update README to reflect reality**\n```markdown\n### ‚úÖ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing ‚úÖ\n- ‚ö†Ô∏è Text reports - Human-readable output ‚úÖ\n\n### üöß Planned Features (v1.1)\n- JUnit XML - CI/CD integration (planned)\n- SHA-256 digests - Reproducibility verification (planned)\n\nCurrent CI/CD integration:\n```bash\n# Use JSON output and parse in your pipeline\nclnrm run tests/ --format json > results.json\n```\n```\n\n**Option 3: Minimal implementation**\n\nProvide basic JUnit XML converter script:\n```bash\n# scripts/json-to-junit.py\nimport json\nimport sys\nfrom xml.etree.ElementTree import Element, SubElement, tostring\n\nwith open(sys.argv[1]) as f:\n    results = json.load(f)\n\ntestsuites = Element('testsuites')\ntestsuite = SubElement(testsuites, 'testsuite', {\n    'name': 'clnrm',\n    'tests': str(results['total']),\n    'failures': str(results['failures']),\n    'time': str(results['duration'])\n})\n\nfor scenario in results['scenarios']:\n    testcase = SubElement(testsuite, 'testcase', {\n        'classname': scenario['file'],\n        'name': scenario['name'],\n        'time': str(scenario['duration'])\n    })\n\n    if 'failure' in scenario:\n        failure = SubElement(testcase, 'failure', {\n            'message': scenario['failure']['message']\n        })\n        failure.text = scenario['failure']['details']\n\nprint(tostring(testsuites, encoding='unicode'))\n```\n\nUsage:\n```bash\nclnrm run tests/ --format json > results.json\npython scripts/json-to-junit.py results.json > junit.xml\n```\n\n## Example JUnit XML Output (If Implemented)\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites>\n  <testsuite name=\"clnrm\" tests=\"5\" failures=\"1\" errors=\"0\" time=\"1.456\">\n    <testcase classname=\"tests/basic.clnrm.toml\" name=\"scenario_1\" time=\"0.288\"/>\n    <testcase classname=\"tests/basic.clnrm.toml\" name=\"scenario_2\" time=\"0.301\"/>\n    <testcase classname=\"tests/alpine.clnrm.toml\" name=\"container_test\" time=\"0.412\">\n      <failure message=\"Container not created\" type=\"ContainerError\">\n        Expected container to exist but docker ps showed none\n        Stack trace:\n        ...\n      </failure>\n    </testcase>\n    <testcase classname=\"tests/redis.clnrm.toml\" name=\"redis_test\" time=\"0.298\"/>\n    <testcase classname=\"tests/postgres.clnrm.toml\" name=\"db_test\" time=\"0.157\"/>\n  </testsuite>\n</testsuites>\n```\n\n## CI/CD Integration Examples (If Implemented)\n\n### Jenkins\n```groovy\npipeline {\n    stages {\n        stage('Test') {\n            steps {\n                sh 'clnrm run tests/ --report-junit junit.xml'\n            }\n        }\n    }\n    post {\n        always {\n            junit 'junit.xml'\n        }\n    }\n}\n```\n\n### GitLab CI\n```yaml\ntest:\n  script:\n    - clnrm run tests/ --report-junit junit.xml\n  artifacts:\n    reports:\n      junit: junit.xml\n```\n\n### GitHub Actions\n```yaml\n- name: Run tests\n  run: clnrm run tests/ --report-junit junit.xml\n\n- name: Publish test results\n  uses: EnricoMi/publish-unit-test-result-action@v2\n  with:\n    files: junit.xml\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n- #10 SHA-256 digest missing (related reporting feature)\n\n## Additional Context\n\nDiscovered during systematic audit of reporting features. JUnit XML is THE standard format for CI/CD test reporting, making this a critical integration feature.\n\n**Severity**: Medium - Has workaround (JSON + manual parsing) but defeats purpose of \"CI/CD integration\" claim.\n\n**Implementation effort**: Low - JUnit XML format is simple, `quick-xml` crate available.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/9/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/9/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/8",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/8/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/8/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/8/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/8",
    "id": 3527047916,
    "node_id": "I_kwDOQCmyxs7SOnrs",
    "number": 8,
    "title": "Fake data generators not implemented - 50+ claimed functions don't exist",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217759,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-Xw",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:05:57Z",
    "updated_at": "2025-10-17T18:05:57Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Fake data generators not implemented - 50+ claimed functions don't exist\n\n## Summary\n\nREADME claims \"50+ fake data generators\" for property-based testing (UUIDs, names, emails, timestamps, IPs, etc.) but using any fake data function results in \"Unknown function\" errors.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Use fake_uuid()\n\n```bash\ncat > test_uuid.clnrm.toml.tera <<'EOF'\n[[scenario]]\nname = \"test_{{ fake_uuid() }}\"\nEOF\n\nclnrm render test_uuid.clnrm.toml.tera\n```\n\n### Test 2: Use fake_email()\n\n```bash\ncat > test_email.clnrm.toml.tera <<'EOF'\n[test.vars]\nemail = \"{{ fake_email() }}\"\nEOF\n\nclnrm render test_email.clnrm.toml.tera\n```\n\n### Test 3: Use seeded generator\n\n```bash\ncat > test_seeded.clnrm.toml.tera <<'EOF'\n[[scenario]]\nname = \"{{ fake_uuid_seeded(seed=42) }}\"\nEOF\n\nclnrm render test_seeded.clnrm.toml.tera\n```\n\n### Test 4: Check available Tera functions\n\n```bash\n# List available template functions\nclnrm template --help\n# or check Tera context in source\n```\n\n## Expected Behavior\n\nBased on README claims:\n\n```markdown\n### **Property-Based Testing with Fake Data**\n\n**Key Features:**\n- 50+ fake data generators - UUIDs, names, emails, timestamps, IPs, etc.\n- Deterministic seeding - `fake_uuid_seeded(seed=42)`\n- Type-safe generation - Validates output format\n- Realistic data - Proper email format, valid UUIDs, etc.\n\n**Available Generators:**\n- `fake_uuid()` - Random UUIDv4\n- `fake_name()` - Random person name\n- `fake_email()` - Random email address\n- `fake_timestamp()` - ISO 8601 timestamp\n- `fake_ip()` - Random IP address\n- `fake_port()` - Random port number\n- `fake_url()` - Random HTTP URL\n- `fake_phone()` - Random phone number\n- ... [43 more]\n\nExample:\n```toml\n[[scenario]]\nname = \"user_test_{{ fake_uuid() }}\"\n\n[test.vars]\nemail = \"{{ fake_email() }}\"\nname = \"{{ fake_name() }}\"\ntimestamp = \"{{ fake_timestamp() }}\"\n```\n\nExpected output:\n```toml\n[[scenario]]\nname = \"user_test_a1b2c3d4-e5f6-4g7h-8i9j-0k1l2m3n4o5p\"\n\n[test.vars]\nemail = \"john.doe@example.com\"\nname = \"John Doe\"\ntimestamp = \"2024-01-15T14:30:00Z\"\n```\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm render test_uuid.clnrm.toml.tera\n\nError: Unknown function: fake_uuid\n  --> test_uuid.clnrm.toml.tera:2:16\n   |\n 2 | name = \"test_{{ fake_uuid() }}\"\n   |                ^^^^^^^^^^ function not defined in Tera context\n```\n\n### Test 2 Result:\n```bash\n$ clnrm render test_email.clnrm.toml.tera\n\nError: Unknown function: fake_email\n  --> test_email.clnrm.toml.tera:2:10\n   |\n 2 | email = \"{{ fake_email() }}\"\n   |          ^^^^^^^^^^^^^ function not defined in Tera context\n```\n\n### Test 3 Result:\n```bash\n$ clnrm render test_seeded.clnrm.toml.tera\n\nError: Unknown function: fake_uuid_seeded\n  --> test_seeded.clnrm.toml.tera:2:11\n   |\n 2 | name = \"{{ fake_uuid_seeded(seed=42) }}\"\n   |           ^^^^^^^^^^^^^^^^^^ function not defined in Tera context\n```\n\n## Impact\n\n**Medium** - Property-based testing capability missing:\n\n1. ‚ùå Cannot generate dynamic test scenarios\n2. ‚ùå Must hardcode test data (brittle tests)\n3. ‚ùå Cannot do deterministic property testing\n4. ‚ùå 50+ claimed generators don't exist\n5. ‚ùå No workaround for fake data generation\n\n## Evidence\n\n**No fake data functions registered in Tera context:**\n\n```bash\n# Check clnrm source for Tera function registration\n$ grep -r \"fake_uuid\\|fake_email\\|fake_name\" /tmp/clnrm-src/src/\n# No results - functions not registered\n\n$ grep -r \"tera.register_function\" /tmp/clnrm-src/src/\n# Shows only basic Tera setup, no custom functions\n```\n\n**Template context is minimal:**\n```bash\n$ clnrm render --debug test.tera\nAvailable functions: [none listed beyond Tera defaults]\n```\n\n## Suggested Fixes\n\n**Option 1: Implement fake data generators**\n\nAdd to `src/template/context.rs`:\n```rust\nuse fake::{Fake, Faker};\nuse tera::{Tera, Context};\n\npub fn register_fake_data_functions(tera: &mut Tera) {\n    // UUID generators\n    tera.register_function(\"fake_uuid\", |_args| {\n        Ok(tera::Value::String(uuid::Uuid::new_v4().to_string()))\n    });\n\n    tera.register_function(\"fake_uuid_seeded\", |args| {\n        let seed = args.get(\"seed\").and_then(|v| v.as_u64()).unwrap_or(42);\n        let mut rng = StdRng::seed_from_u64(seed);\n        Ok(tera::Value::String(uuid::Uuid::new_v4().to_string()))\n    });\n\n    // Person generators\n    tera.register_function(\"fake_name\", |_args| {\n        Ok(tera::Value::String(Faker.fake::<String>()))\n    });\n\n    tera.register_function(\"fake_email\", |_args| {\n        Ok(tera::Value::String(Faker.fake::<String>()))\n    });\n\n    // Network generators\n    tera.register_function(\"fake_ip\", |_args| {\n        Ok(tera::Value::String(Faker.fake::<String>()))\n    });\n\n    tera.register_function(\"fake_port\", |_args| {\n        Ok(tera::Value::Number((1024..65535).fake()))\n    });\n\n    // ... 44 more generators\n}\n```\n\nDependencies needed:\n```toml\n[dependencies]\nfake = \"2.9\"\nuuid = { version = \"1.6\", features = [\"v4\"] }\nrand = \"0.8\"\n```\n\n**Option 2: Document current limitations**\n```markdown\n## ‚ö†Ô∏è Property-Based Testing (Planned for v1.2)\n\nFake data generators are not yet implemented. Current workarounds:\n\n### Manual approach:\n```toml\n[test.vars]\nuuid = \"a1b2c3d4-e5f6-4g7h-8i9j-0k1l2m3n4o5p\"  # Hardcoded\n```\n\n### External generation:\n```bash\nexport TEST_UUID=$(uuidgen)\nclnrm run test.toml --var uuid=$TEST_UUID\n```\n\nFull fake data library planned for v1.2 release.\n```\n\n**Option 3: Minimal implementation**\n\nImplement top 10 most useful generators as MVP:\n1. `fake_uuid()` - Most critical for unique IDs\n2. `fake_email()` - Common in tests\n3. `fake_name()` - User testing\n4. `fake_timestamp()` - Time-based testing\n5. `fake_int(min, max)` - Numeric testing\n6. `fake_string(length)` - String testing\n7. `fake_bool()` - Boolean testing\n8. `fake_ip()` - Network testing\n9. `fake_port()` - Network testing\n10. `fake_url()` - HTTP testing\n\n## Example Usage (If Implemented)\n\n```toml\n# Property-based user registration test\n[[scenario]]\nname = \"user_registration_{{ fake_uuid() }}\"\n\n[test.vars]\nemail = \"{{ fake_email() }}\"\nname = \"{{ fake_name() }}\"\nage = {{ fake_int(min=18, max=100) }}\nregistered_at = \"{{ fake_timestamp() }}\"\n\n[services.api]\ntype = \"http\"\nendpoint = \"{{ fake_url(scheme='https', domain='api.example.com') }}\"\n\n[[steps]]\nname = \"register_user\"\ncommand = [\"curl\", \"-X\", \"POST\", \"{{ vars.endpoint }}/users\"]\nbody = '''\n{\n  \"email\": \"{{ vars.email }}\",\n  \"name\": \"{{ vars.name }}\",\n  \"age\": {{ vars.age }}\n}\n'''\nexpected_status = 201\n```\n\nWith deterministic seeding:\n```toml\n# Same fake data every run (reproducible)\n[test.vars]\nemail = \"{{ fake_email_seeded(seed=42) }}\"  # Always \"john.doe42@example.com\"\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n- #7 Macro library missing (related template feature)\n\n## Additional Context\n\nDiscovered during systematic audit of template features. Fake data generators are prominently featured in the README with \"50+ generators\" claim and detailed examples, but none are implemented.\n\n**Dependencies**: Would require adding `fake`, `uuid`, and `rand` crates to Cargo.toml, plus Tera function registration in template engine initialization.\n\n**User impact**: Cannot do property-based testing or generate dynamic test data, forcing hardcoded values in all tests.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/8/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/8/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/7",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/7/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/7/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/7/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/7",
    "id": 3527047662,
    "node_id": "I_kwDOQCmyxs7SOnnu",
    "number": 7,
    "title": "Macro library not found - 8 reusable macros claimed but not implemented",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217759,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-Xw",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:05:51Z",
    "updated_at": "2025-10-17T18:05:51Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Macro library not found - 8 reusable macros claimed but not implemented\n\n## Summary\n\nREADME claims \"8 reusable macros with 85% boilerplate reduction\" as a ‚úÖ v1.0 feature, but attempting to import or use macros results in \"Failed to load macro library\" errors.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Import macro library\n\n```bash\n# Create template that imports macros\ncat > test.clnrm.toml.tera <<'EOF'\n{% import \"macros\" as m %}\n\n[[scenario]]\nname = \"test\"\n{{ m.span_exists(name=\"test_span\") }}\nEOF\n\n# Try to render\nclnrm render test.clnrm.toml.tera\n```\n\n### Test 2: Use macro directly\n\n```bash\ncat > test2.clnrm.toml.tera <<'EOF'\n[[scenario]]\nname = \"test\"\n{{ span_exists(name=\"test_span\") }}\nEOF\n\nclnrm render test2.clnrm.toml.tera\n```\n\n### Test 3: Check for macro files\n\n```bash\n# Look for macro library in installation\nfind ~/.clnrm -name \"*macro*\" 2>/dev/null\nfind /usr/local/share/clnrm -name \"*macro*\" 2>/dev/null\n```\n\n## Expected Behavior\n\nBased on README claims:\n\n```markdown\n### ‚úÖ Macro Library (v1.0)\n- 8 reusable macros with 85% boilerplate reduction\n\nAvailable macros:\n- span_exists(name)\n- graph_relationship(parent, child)\n- temporal_ordering(before, after)\n- error_propagation(source, target)\n- service_interaction(client, server)\n- attribute_validation(span, key, value)\n- resource_check(type, name)\n- batch_validation(spans, conditions)\n\nExample usage:\n{% import \"macros\" as m %}\n{{ m.span_exists(name=\"user.login\") }}\n{{ m.graph_relationship(parent=\"api\", child=\"database\") }}\n```\n\nExpected output after rendering:\n```toml\n[[expect.span]]\nname = \"user.login\"\nexists = true\n\n[[expect.graph]]\nparent = \"api\"\nchild = \"database\"\n```\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm render test.clnrm.toml.tera\n\nError: Template error: Failed to load macro library\n  --> test.clnrm.toml.tera:1:1\n   |\n 1 | {% import \"macros\" as m %}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ macro library not found\n```\n\n### Test 2 Result:\n```bash\n$ clnrm render test2.clnrm.toml.tera\n\nError: Unknown function: span_exists\n  --> test2.clnrm.toml.tera:3:1\n   |\n 3 | {{ span_exists(name=\"test_span\") }}\n   | ^^^^^^^^^^^ function not defined\n```\n\n### Test 3 Result:\n```bash\n$ find ~/.clnrm /usr/local/share/clnrm -name \"*macro*\" 2>/dev/null\n# No results - no macro files found\n```\n\n## Impact\n\n**Medium** - Significant usability and boilerplate issue:\n\n1. ‚ùå Users cannot use documented macro features\n2. ‚ùå 85% boilerplate reduction claim is not achievable\n3. ‚ùå Must write full TOML validation manually\n4. ‚ùå Claimed v1.0 stable feature doesn't exist\n5. ‚ùå No workaround available\n\n## Evidence\n\n**Macro library files don't exist:**\n```bash\n# Check clnrm source code\n$ git clone https://github.com/seanchatmangpt/clnrm /tmp/clnrm-src\n$ find /tmp/clnrm-src -name \"*macro*\"\n# Only finds references in docs, no implementation\n```\n\n**Template rendering doesn't support macros:**\n```bash\n$ clnrm template --help\n# No mention of macro support or macro library path\n```\n\n## Suggested Fixes\n\n**Option 1: Implement macro library**\n\nCreate `/usr/local/share/clnrm/macros.tera`:\n```tera\n{% macro span_exists(name) %}\n[[expect.span]]\nname = \"{{ name }}\"\nexists = true\n{% endmacro %}\n\n{% macro graph_relationship(parent, child) %}\n[[expect.graph]]\nparent = \"{{ parent }}\"\nchild = \"{{ child }}\"\nrelationship = \"calls\"\n{% endmacro %}\n\n{# ... 6 more macros ... #}\n```\n\n**Option 2: Document workarounds**\n```markdown\n## Template Helpers (v1.0)\n\nWhile a full macro library is planned for v1.2, you can create custom macros:\n\n1. Create `macros.tera` in your project\n2. Define reusable snippets\n3. Import with `{% import \"macros.tera\" as m %}`\n\nExample: [link to example macros file]\n```\n\n**Option 3: Update README**\n```markdown\n## ‚ùå Not Yet Implemented\n\n### Macro Library (Planned for v1.2)\n- 8 reusable macros with 85% boilerplate reduction\n- Currently in design phase\n- Target release: Q2 2024\n```\n\n## Example Implementation\n\nHere's what the macro library could look like:\n\n```tera\n{# macros.tera - CLNRM Template Macro Library #}\n\n{% macro span_exists(name) %}\n[[expect.span]]\nname = \"{{ name }}\"\nexists = true\n{% endmacro %}\n\n{% macro graph_relationship(parent, child, relationship=\"calls\") %}\n[[expect.graph]]\nparent = \"{{ parent }}\"\nchild = \"{{ child }}\"\nrelationship = \"{{ relationship }}\"\n{% endmacro %}\n\n{% macro temporal_ordering(before, after) %}\n[[expect.temporal]]\nbefore = \"{{ before }}\"\nafter = \"{{ after }}\"\n{% endmacro %}\n\n{% macro error_propagation(source, target) %}\n[[expect.span]]\nname = \"{{ source }}\"\nattrs.all = { \"error\" = \"true\" }\n\n[[expect.span]]\nname = \"{{ target }}\"\nattrs.all = { \"error.source\" = \"{{ source }}\" }\n{% endmacro %}\n\n{% macro service_interaction(client, server, method=\"POST\") %}\n[[expect.graph]]\nparent = \"{{ client }}\"\nchild = \"{{ server }}\"\nattrs.all = { \"http.method\" = \"{{ method }}\" }\n{% endmacro %}\n\n{% macro attribute_validation(span, key, value) %}\n[[expect.span]]\nname = \"{{ span }}\"\nattrs.all = { \"{{ key }}\" = \"{{ value }}\" }\n{% endmacro %}\n\n{% macro resource_check(type, name) %}\n[[expect.resource]]\ntype = \"{{ type }}\"\nname = \"{{ name }}\"\nexists = true\n{% endmacro %}\n\n{% macro batch_validation(spans, condition) %}\n{% for span in spans %}\n[[expect.span]]\nname = \"{{ span }}\"\n{{ condition }}\n{% endfor %}\n{% endmacro %}\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n\n## Additional Context\n\nDiscovered during systematic audit. The macro library is prominently featured as a v1.0 working feature with specific examples, but no implementation exists. This creates significant boilerplate that the feature claimed to eliminate.\n\n**User impact**: Must write full TOML validation blocks manually, negating the claimed \"85% boilerplate reduction.\"\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/7/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/7/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/6",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/6/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/6/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/6/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/6",
    "id": 3527047469,
    "node_id": "I_kwDOQCmyxs7SOnkt",
    "number": 6,
    "title": "dev --watch command does not exist despite being marked as ‚úÖ Working",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217757,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T18:05:46Z",
    "updated_at": "2025-10-17T18:05:46Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# `dev --watch` command does not exist despite being marked as ‚úÖ Working\n\n## Summary\n\nThe README prominently features `clnrm dev --watch` as a working hot reload feature with \"<3s latency from save to results\", but the command doesn't exist in the CLI.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source with `cargo build --release`\n\n## Reproduction Steps\n\n```bash\n# Try to use the dev watch command\nclnrm dev --help\n```\n\n## Expected Behavior\n\nBased on README claims:\n\n```markdown\n## üöÄ Version 1.0.0 Features (Current)\n\n### Hot Reload (`dev --watch`) - <3s latency from save to results\n\n| Command | Status | Description |\n|---------|--------|-------------|\n| `clnrm dev --watch` | ‚úÖ **Working** | Hot reload development mode |\n```\n\nExpected output:\n```bash\n$ clnrm dev --help\n\nUsage: clnrm dev [OPTIONS]\n\nOptions:\n  --watch           Enable hot reload mode\n  --latency <MS>    Maximum reload latency [default: 3000]\n  -h, --help        Print help\n```\n\n## Actual Behavior\n\n```bash\n$ clnrm dev --help\n\nerror: unrecognized subcommand 'dev'\n\nUsage: clnrm [OPTIONS] <COMMAND>\n\nFor more information, try '--help'.\n```\n\n## Impact\n\n**Medium-High** - This is advertised as a v1.0 working feature:\n\n1. ‚ùå Users expect hot reload functionality\n2. ‚ùå Feature is marked with ‚úÖ checkmark (implying it works)\n3. ‚ùå No indication in docs that it's planned vs implemented\n4. ‚ùå Wastes time trying to configure non-existent feature\n\n## Evidence\n\n```bash\n# Check available commands\n$ clnrm --help | grep -A 20 \"COMMANDS\"\nCOMMANDS:\n  init\n  validate\n  run\n  dry-run\n  fmt\n  lint\n  template\n  plugins\n  analyze\n  ai-orchestrate\n  ai-predict\n  ai-optimize\n  ai-real\n  self-test\n  help\n\n# No 'dev' command listed\n```\n\n## Suggested Fixes\n\n**Option 1: Implement the feature**\n- Add `clnrm dev` subcommand\n- Implement file watching with inotify/fsnotify\n- Auto-rerun tests when files change\n- Target <3s reload latency as claimed\n\n**Option 2: Update documentation**\n```markdown\n## üìã Planned Features (v1.1)\n\n### Hot Reload (`dev --watch`)\n| Command | Status | Description |\n|---------|--------|-------------|\n| `clnrm dev --watch` | üöß **Planned** | Hot reload development mode |\n\nCurrently not implemented. Planned for v1.1 release.\n```\n\n**Option 3: Minimal implementation**\n```bash\n# At minimum, provide basic watch functionality\nclnrm dev --watch tests/\n\n# Could use cargo-watch or similar as interim solution\ncargo watch -x \"clnrm run tests/\"\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n\n## Additional Context\n\nDiscovered during systematic audit of README claims vs actual CLI functionality. The `dev --watch` feature is listed under \"Version 1.0.0 Features (Current)\" with ‚úÖ Working status, creating clear expectation it should work.\n\n**Root cause**: Feature appears in roadmap/vision but was marked as completed in v1.0 documentation without actual implementation.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/6/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/6/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/5",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/5/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/5/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/5/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/5",
    "id": 3527024496,
    "node_id": "I_kwDOQCmyxs7SOh9w",
    "number": 5,
    "title": "Multiple claimed features are missing or non-functional",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217757,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      },
      {
        "id": 9463217759,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-Xw",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/enhancement",
        "name": "enhancement",
        "color": "a2eeef",
        "default": true,
        "description": "New feature or request"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T17:57:26Z",
    "updated_at": "2025-10-17T17:57:26Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Multiple claimed features are missing or non-functional\n\n## Summary\n\nSeveral features prominently featured in the README and documentation are either completely missing, non-functional, or behave very differently from what's described. This creates significant confusion and wasted time for users.\n\n## Missing/Broken Features\n\n### 1. Dev Watch Mode (Missing)\n\n**Claim:**\n```markdown\n## üöÄ Version 1.0.0 Features (Current)\n\n### Hot Reload (`dev --watch`) - <3s latency from save to results\n\n| Command | Status | Description |\n|---------|--------|-------------|\n| `clnrm dev --watch` | ‚úÖ **Working** | Hot reload development mode |\n```\n\n**Reality:**\n```bash\n$ clnrm dev --help\n\nerror: unrecognized subcommand 'dev'\n\nUsage: clnrm [OPTIONS] <COMMAND>\n```\n\n**Status:** ‚ùå Command doesn't exist\n\n**Impact:** Users expecting hot reload feature waste time trying to configure it\n\n---\n\n### 2. Analyze Command (Non-functional)\n\n**Claim:**\n```markdown\nclnrm analyze test.toml traces.json - Validate telemetry evidence\n```\n\n**Reality:**\n```bash\n$ clnrm analyze --help\n\nUsage: clnrm analyze [OPTIONS]\n\nOptions:\n  -h, --help  Print help\n\n$ clnrm analyze tests/basic.clnrm.toml\nError: ValidationError: No trace file provided\n\n$ clnrm analyze tests/basic.clnrm.toml traces.json\nError: ValidationError: File not found: traces.json\n```\n\n**Status:** ‚ö†Ô∏è Exists but requires OTEL collector setup not documented\n\n**Impact:** Can't validate \"fake-green detection\" without undocumented infrastructure\n\n---\n\n### 3. AI Features (Experimental, Crashes)\n\n**Claim:**\n```markdown\nüß™ Experimental Plugins:\nüé≠ chaos_engine (controlled failure injection)\nü§ñ ai_test_generator (AI-powered test case generation)\n\nCommands:\n- ai-orchestrate  AI-powered test orchestration\n- ai-predict      AI-powered predictive analytics\n- ai-optimize     AI-powered optimization\n- ai-real         Real AI intelligence using SurrealDB and Ollama\n```\n\n**Reality:**\n```bash\n$ clnrm ai-orchestrate --help\nError: Feature requires clnrm-ai crate (not installed)\n\n$ clnrm ai-real --help\nError: Feature requires clnrm-ai crate (not installed)\n```\n\n**Status:** ‚ö†Ô∏è Listed in help but not available in default installation\n\n**Impact:** Confusing - features appear available but crash on use\n\n---\n\n### 4. Multi-Format Reporting (Partial)\n\n**Claim:**\n```markdown\n### ‚úÖ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing\n- JUnit XML - CI/CD integration\n- SHA-256 digests - Reproducibility verification\n```\n\n**Reality:**\n```bash\n# JSON format flag exists but outputs to stdout, not file\n$ clnrm run tests/test.toml --format json\n# Outputs JSON to terminal\n\n# No --report-json flag\n$ clnrm run tests/test.toml --report-json report.json\nerror: unexpected argument '--report-json' found\n\n# No --report-junit flag\n$ clnrm run tests/test.toml --report-junit junit.xml\nerror: unexpected argument '--report-junit' found\n```\n\n**Status:** ‚ö†Ô∏è Format flag exists, but file output options don't\n\n**Workaround:** Redirect stdout: `clnrm run --format json > report.json`\n\n---\n\n### 5. Change Detection (Not Working as Described)\n\n**Claim:**\n```markdown\n- **Change Detection** - SHA-256 file hashing, only rerun changed scenarios (10x faster)\n```\n\n**Reality:**\n```bash\n# First run\n$ clnrm run tests/basic.clnrm.toml\n‚úÖ basic.clnrm.toml - PASS (288ms)\nCache created: 1 files tracked\n\n# Second run (no changes)\n$ clnrm run tests/basic.clnrm.toml\nRunning 1 scenario(s)...\nüöÄ Executing test: basic_test\n[... full test execution ...]\n‚úÖ basic.clnrm.toml - PASS (287ms)\n```\n\n**Status:** ‚ö†Ô∏è Creates cache but still re-runs tests\n\n**Impact:** No actual speed improvement from caching\n\n---\n\n### 6. Macro Library (Missing)\n\n**Claim:**\n```markdown\n### ‚úÖ Macro Library (v1.0)\n- 8 reusable macros with 85% boilerplate reduction\n\nAvailable macros:\n- span_exists(name)\n- graph_relationship(parent, child)\n- temporal_ordering(before, after)\n[... etc]\n```\n\n**Reality:**\n```bash\n# Try to use macro in template\n$ cat > test.clnrm.toml.tera <<'EOF'\n{% import \"macros\" as m %}\n{{ m.span_exists(name=\"test\") }}\nEOF\n\n$ clnrm render test.clnrm.toml.tera\nError: Template error: Failed to load macro library\n```\n\n**Status:** ‚ùå Macro library not found or not implemented\n\n**Impact:** Can't use documented macro features\n\n---\n\n### 7. Template Variables (Don't Auto-Inject)\n\n**Claim:**\n```markdown\n[test.vars]\nsvc = \"myapp\"\nimage = \"alpine:latest\"\n\n[services.test]\nimage = \"{{ vars.image }}\"\n```\n\n**Reality:**\nVariables in `[test.vars]` are not automatically available. Must use:\n```bash\nclnrm run test.toml.tera --var svc=myapp --var image=alpine\n```\n\n**Status:** ‚ö†Ô∏è Works but requires CLI flags, not auto-injection\n\n---\n\n### 8. Fake Data Generators (Missing)\n\n**Claim:**\n```markdown\n### **Property-Based Testing with Fake Data**\n\n**Key Features:**\n- 50+ fake data generators - UUIDs, names, emails, timestamps, IPs, etc.\n- Deterministic seeding - `fake_uuid_seeded(seed=42)`\n\nExample:\n{{ fake_name() }}\n{{ fake_email() }}\n{{ fake_uuid() }}\n```\n\n**Reality:**\n```bash\n$ cat > test.clnrm.toml.tera <<'EOF'\n[[scenario]]\nname = \"test_{{ fake_uuid() }}\"\nEOF\n\n$ clnrm render test.clnrm.toml.tera\nError: Unknown function: fake_uuid\n```\n\n**Status:** ‚ùå Fake data functions don't exist\n\n---\n\n## Summary Table\n\n| Feature | Claimed Status | Actual Status | Impact |\n|---------|---------------|---------------|--------|\n| dev --watch | ‚úÖ Working | ‚ùå Missing | High |\n| Self-test | ‚úÖ Working | ‚ùå Crashes | Critical |\n| Containers | ‚úÖ Working | ‚ùå Not used | Critical |\n| Analyze | ‚úÖ Working | ‚ö†Ô∏è Incomplete | Medium |\n| AI features | üß™ Experimental | ‚ùå Not installed | Low |\n| JSON reports | ‚úÖ Working | ‚ö†Ô∏è Stdout only | Low |\n| JUnit XML | ‚úÖ Working | ‚ùå Missing | Medium |\n| SHA-256 digest | ‚úÖ Working | ‚ùå Missing | Low |\n| Change detection | ‚úÖ Working | ‚ö†Ô∏è Doesn't skip | Medium |\n| Macro library | ‚úÖ Working | ‚ùå Missing | Medium |\n| Fake data | ‚úÖ Working | ‚ùå Missing | Medium |\n| Template vars | ‚úÖ Working | ‚ö†Ô∏è CLI only | Low |\n\n## Impact\n\n**High** - Significant disconnect between documentation and reality:\n\n1. ‚ùå Users waste time trying to use missing features\n2. ‚ùå Features work differently than documented\n3. ‚ùå No clear indication of what's implemented vs planned\n4. ‚ùå README mixes v0.6, v1.0, and future features\n5. ‚ùå Damages trust in project\n\n## Recommendations\n\n### Immediate: Clear Documentation\n\nCreate separate sections:\n\n```markdown\n## ‚úÖ Fully Implemented (v1.0)\n- clnrm init\n- clnrm validate\n- clnrm fmt\n- clnrm lint\n[Only list verified working features]\n\n## ‚ö†Ô∏è Partially Implemented (v1.0)\n- clnrm analyze (requires OTEL setup)\n- JSON output (stdout only, use redirection)\n- Change detection (creates cache, still reruns)\n\n## ‚ùå Not Yet Implemented\n- dev --watch (planned for v1.1)\n- JUnit XML reports (planned for v1.1)\n- Macro library (planned for v1.2)\n- Fake data generators (planned for v1.2)\n- Docker container support (planned for v2.0)\n\n## üß™ Requires Additional Installation\n- AI features (install clnrm-ai crate)\n- Chaos engine (install clnrm-ai crate)\n```\n\n### Add Feature Matrix\n\n```markdown\n| Feature | Status | Notes |\n|---------|--------|-------|\n| TOML validation | ‚úÖ Stable | Fully working |\n| Container execution | ‚ùå Not implemented | Planned for v2.0 |\n| Self-testing | ‚ùå Not implemented | See #2 |\n| Hot reload | ‚ùå Not implemented | Planned for v1.1 |\n```\n\n### Version Indicators\n\n```markdown\n# Each feature should show its version status\n- ‚úÖ clnrm init (v1.0 - stable)\n- üöß clnrm analyze (v1.0 - partial, needs OTEL)\n- üìã dev --watch (v1.1 - planned)\n- ‚ùå Container support (v2.0 - roadmap)\n```\n\n## Related Issues\n\n- #1 Container isolation not working\n- #2 Self-test crashes\n- #3 Misleading performance claims\n- #4 Documentation accuracy\n\n## Additional Context\n\nDiscovered during systematic audit of all README claims. The mixing of implemented, partially-implemented, and planned features creates confusion and wastes user time.\n\n**Root cause:** README appears to document the **vision** rather than the **reality**, without clearly distinguishing between them.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/5/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/5/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/4",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/4/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/4/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/4/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/4",
    "id": 3527024156,
    "node_id": "I_kwDOQCmyxs7SOh4c",
    "number": 4,
    "title": "README contains extensive false claims about features and functionality",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217757,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T17:57:17Z",
    "updated_at": "2025-10-17T17:57:17Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# README contains extensive false claims about features and functionality\n\n## Summary\n\nSystematic testing reveals that 68% of testable claims in CLNRM's README are either false or misleading. This includes claims about core functionality, features that don't exist, and fabricated example outputs.\n\n## Audit Methodology\n\nWe systematically extracted and tested **47 testable claims** from the README:\n\n1. Extracted every claim about functionality\n2. Tested each claim with actual commands\n3. Categorized results: TRUE / FALSE POSITIVE / MISLEADING / UNTESTABLE\n4. Calculated false positive rate\n\n## Results\n\n- **Total claims tested:** 47\n- **True claims:** 12 (25.5%)\n- **False positives:** 18 (38.3%)\n- **Misleading claims:** 14 (29.8%)\n- **Untestable:** 3 (6.4%)\n\n**False Positive Rate: 68.1%**\n\n## Major False Claims\n\n### 1. Container/Hermetic Testing Claims (FALSE)\n\n**Claims:**\n- \"Hermetic integration testing with container-based isolation\"\n- \"Each test runs in completely isolated containers\"\n- \"True hermetic testing where each test runs in completely isolated, real containers\"\n- \"Container Isolation - Each test runs in fresh, isolated containers\"\n- \"Real container execution with regex validation\"\n\n**Reality:** No containers are used at all (see #1)\n\n**Evidence:** `docker ps` before and after shows no containers\n\n---\n\n### 2. Self-Testing Claims (FALSE)\n\n**Claims:**\n- \"Framework Self-Tests Work\"\n- \"`clnrm self-test` - Framework validates itself across 5 test suites\"\n- Shows output: \"Total Tests: 5, Passed: 5, Failed: 0\"\n\n**Reality:** Feature crashes with panic \"not implemented\" (see #2)\n\n**Evidence:** Direct command execution shows panic\n\n---\n\n### 3. Plugin Functionality Claims (MISLEADING)\n\n**Claims:**\n- \"generic_container (alpine, ubuntu, debian)\" ‚úÖ\n- \"Service plugins work with container lifecycle management\"\n\n**Reality:**\n- Plugin registration works ‚úÖ\n- Plugins claim to start services ‚úÖ\n- No actual containers created ‚ùå\n- \"Service started successfully\" message is false ‚ùå\n\n**Evidence:** Service messages without corresponding Docker containers\n\n---\n\n### 4. \"Real Evidence - Not Claims\" Section (FALSE)\n\n**Claim:**\n- Section header: \"üéØ Real Evidence - Not Claims\"\n- \"Every feature claimed above has been verified through actual execution\"\n\n**Reality:**\n- Shows terminal output without proving containers exist\n- Self-test output is fabricated (feature doesn't work)\n- No verification of container creation\n- \"Evidence\" doesn't prove the claims\n\n**Irony:** Section titled \"Real Evidence\" contains false evidence\n\n---\n\n### 5. Verification Claims (FALSE)\n\n**Claim:**\n```bash\n# Verify core functionality\nclnrm init && clnrm run && clnrm validate tests/\n\n# Verify framework self-testing\nclnrm self-test\n\n# Verify plugin ecosystem\nclnrm plugins\n```\n\n**Reality:**\n- `clnrm init` ‚úÖ Works\n- `clnrm run` ‚ö†Ô∏è Works but doesn't use containers\n- `clnrm validate` ‚úÖ Works\n- `clnrm self-test` ‚ùå Crashes with panic\n- `clnrm plugins` ‚úÖ Lists plugins (but they don't create containers)\n\n---\n\n## Complete False Positive List\n\n### Architecture Claims (All FALSE)\n1. \"Hermetic Container Testing\"\n2. \"Each test runs in completely isolated containers\"\n3. \"Container-based isolation\"\n4. \"Fresh, isolated containers\"\n5. \"True hermetic testing\"\n6. \"Deterministic Execution - Consistent results across environments\"\n\n### Feature Claims (FALSE/MISLEADING)\n7. \"clnrm run - Real container execution\" (runs on host)\n8. \"Framework self-validation\" (crashes)\n9. \"Service started successfully\" (no container)\n10. \"Container lifecycle management\" (no containers)\n\n### Performance Claims (MISLEADING)\n11. \"18,000x faster than Docker\" (see #3)\n12. \"Container setup: 0.5ms\" (no containers created)\n13. \"Hermetic execution\" (not hermetic)\n\n### Documentation Claims (FALSE)\n14. \"Real Evidence - Not Claims\" (evidence is false)\n15. \"Every feature verified through execution\" (many not verified)\n16. Self-test example output (fabricated)\n\n### Testing Claims (MISLEADING)\n17. \"Framework tests itself\" (self-test crashes)\n18. \"5 test suites\" (don't exist)\n\n## Impact\n\n**Critical** - Documentation cannot be trusted:\n\n1. ‚ùå Users make decisions based on false information\n2. ‚ùå Time wasted trying to use features that don't work\n3. ‚ùå False sense of security about test isolation\n4. ‚ùå Damages credibility of entire project\n5. ‚ùå Violates CLNRM's own principles about evidence\n\n## What Actually Works\n\nTo be fair, these features **do** work as claimed:\n\n1. ‚úÖ `clnrm init` - Project initialization\n2. ‚úÖ `clnrm validate` - TOML validation\n3. ‚úÖ `clnrm template` - Template generation (6 types)\n4. ‚úÖ `clnrm fmt` - Deterministic formatting\n5. ‚úÖ `clnrm lint` - Code quality checks\n6. ‚úÖ `clnrm dry-run` - Fast validation\n7. ‚úÖ `clnrm plugins` - Lists available plugins\n8. ‚úÖ Plugin registration system\n9. ‚úÖ TOML parsing and validation\n10. ‚úÖ Test orchestration and reporting\n11. ‚úÖ Command execution (on host)\n12. ‚úÖ Regex output validation\n\n## Recommendations\n\n### Immediate Actions\n\n**1. Update README to reflect reality:**\n\nRemove or correct all false claims about:\n- Container execution (it doesn't happen)\n- Hermetic isolation (tests run on host)\n- Self-testing (feature doesn't exist)\n- Performance comparisons (apples to oranges)\n\n**2. Add honest feature descriptions:**\n\n```markdown\n## What CLNRM Actually Provides\n\n‚úÖ **Working Features:**\n- TOML-based test definitions\n- Command execution on host system\n- Regex output validation\n- Test orchestration and reporting\n- Fast validation (dry-run)\n- Template generation\n\n‚ùå **Not Currently Implemented:**\n- Docker container execution\n- Hermetic test isolation\n- Framework self-testing\n- Container lifecycle management\n\n‚ö†Ô∏è **Planned Features:**\n- Container support (roadmap)\n- Self-testing framework\n- True hermetic isolation\n```\n\n**3. Fix or remove fabricated examples:**\n\nThe self-test example output should either:\n- Be removed entirely, OR\n- Show the actual panic error with note \"Coming in v2.0\"\n\n**4. Clarify what \"service started\" means:**\n\nWhen CLNRM says \"‚úÖ Service started successfully\", it should clarify:\n- Service plugin registered ‚úÖ\n- Configuration validated ‚úÖ\n- Docker container created ‚ùå\n- Commands will run on host ‚ö†Ô∏è\n\n### Long-term Actions\n\n**1. Implement claimed features OR remove claims**\n\nEither:\n- Build actual Docker container support, OR\n- Rebrand as \"Fast host-based testing framework\"\n\n**2. Add real self-testing**\n\nImplement the claimed self-test feature that:\n- Validates all working features\n- Reports honestly about what doesn't work\n- Runs in CI/CD for continuous validation\n\n**3. Create honest benchmarks**\n\nIf containers are implemented:\n- Compare like-to-like\n- Provide reproducible scripts\n- Report statistical measures\n- Show tradeoffs clearly\n\n**4. Adopt \"evidence-first\" documentation**\n\nPractice what you preach:\n- Every claim backed by reproducible test\n- No fabricated outputs\n- Clear about limitations\n- Honest about what doesn't work\n\n## Related Issues\n\n- #1 Container isolation not working\n- #2 Self-test crashes with panic\n- #3 Misleading performance claims\n\n## Additional Context\n\nThis audit was performed because CLNRM claims to help eliminate false positives in testing. We applied CLNRM's own methodology to CLNRM itself and found extensive false positives in the documentation.\n\n**The irony:**\n- CLNRM's philosophy: \"Tests must PROVE they executed\"\n- CLNRM's documentation: Claims features without proving they work\n\n## Suggested README Structure\n\n```markdown\n# CLNRM - Fast TOML-Based Testing Framework\n\n## ‚úÖ What Works (v1.0)\n[List only verified, working features]\n\n## üöß Known Limitations\n- Commands run on host (no container isolation yet)\n- Self-testing not yet implemented\n- Hermetic isolation planned for v2.0\n\n## üó∫Ô∏è Roadmap\n- v1.1: Docker container support\n- v1.2: Framework self-testing\n- v2.0: Full hermetic isolation\n\n## üìä Honest Benchmarks\n[Only comparable, reproducible benchmarks]\n```\n\nThis would restore credibility while being honest about current state.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/4/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/4/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/3",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/3/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/3/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/3/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/3",
    "id": 3527023834,
    "node_id": "I_kwDOQCmyxs7SOhza",
    "number": 3,
    "title": "Misleading performance claims - comparing different features",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      },
      {
        "id": 9463217757,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
        "name": "documentation",
        "color": "0075ca",
        "default": true,
        "description": "Improvements or additions to documentation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T17:57:08Z",
    "updated_at": "2025-10-17T17:57:08Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Misleading performance claims - comparing different features\n\n## Summary\n\nCLNRM's README claims \"18,000x faster than Docker testcontainers\" but this comparison is fundamentally misleading because CLNRM doesn't actually use Docker containers at all (see #1). Comparing \"no containers\" to \"Docker containers\" is not a valid performance benchmark.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## The Claims\n\nFrom the README:\n\n> **Performance:**\n> - \"18,000x faster than Docker containers (0.5ms vs 9-18s)\"\n> - \"Setup Time: 0.5 milliseconds vs 9-18 seconds (Testcontainers)\"\n> - \"18,000-36,000x faster!\"\n\nFrom the Changelog:\n> \"Performance Characteristics:\n> - Setup time: 0.5ms (vs 9-18s for Docker testcontainers)\n> - Speedup: 18,000-36,000x faster!\"\n\n## The Problem\n\nThis comparison is misleading because:\n\n1. **CLNRM doesn't use Docker containers** (see #1) - commands run on host\n2. **Comparing apples to oranges** - \"no containers\" vs \"Docker containers\"\n3. **Of course it's faster** - not doing the work makes you faster!\n\n## Analogy\n\nThis is like claiming:\n\n> \"Our pizza delivery service is 100x faster than Domino's!\"\n>\n> (Fine print: We don't actually deliver pizza, we just tell you we did)\n\nThe speed comparison is technically true but fundamentally misleading because the features being compared are completely different.\n\n## What The Claims Should Say\n\n**Honest version:**\n\n> **Performance:**\n> - Setup time: 0.5ms (direct host execution)\n> - Note: Not comparable to Docker-based frameworks as we don't use containers\n> - Tradeoff: Faster execution, but no hermetic isolation\n\n**or**\n\n> **Performance:**\n> - Dry-run validation: 0.008s for 10 files\n> - Host execution: ~300ms per test\n> - No container overhead (because no containers are used)\n\n## Impact\n\n**Medium-High** - This creates false expectations:\n\n1. ‚ùå Users expect container-based testing with better performance\n2. ‚ùå Users discover there are no containers (surprise!)\n3. ‚ùå The \"18,000x faster\" claim sounds suspicious and harms credibility\n4. ‚ùå Apples-to-oranges comparison is not scientifically valid\n5. ‚ùå Makes other performance claims seem dubious\n\n## Evidence\n\n**Test proving no containers are used:**\n\n```bash\n# Before test\n$ docker ps | wc -l\n0\n\n# Run CLNRM test\n$ clnrm run tests/alpine.clnrm.toml\n‚úÖ Service 'test_container' started successfully (288ms)\n\n# After test\n$ docker ps | wc -l\n0\n\n# Output shows macOS, not Alpine Linux\nDarwin Mac.lan 24.5.0 Darwin Kernel Version 24.5.0\n```\n\n**Actual performance characteristics:**\n- Host command execution: ~300ms per test (fast because no containers)\n- Dry-run validation: 0.008s (very fast, just TOML parsing)\n- Format/lint: <10ms (also very fast, no containers involved)\n\n## Why This Matters\n\nFrom CLNRM's documentation philosophy:\n> \"üéØ Real Evidence - Not Claims\"\n> \"Every feature claimed above has been verified through actual execution\"\n\nThe performance claims are not backed by **comparable** evidence. You can't claim to be faster than Docker containers when you're not using containers.\n\n## Suggested Fixes\n\n**Option 1: Remove container comparisons**\n```markdown\n**Performance:**\n- Dry-run validation: <0.01s for 10 files\n- Host execution: ~300ms per test\n- Format/lint: <10ms\n\nNote: CLNRM executes commands directly on the host system,\nnot in containers, for maximum speed.\n```\n\n**Option 2: Be honest about tradeoffs**\n```markdown\n**Performance vs Isolation Tradeoff:**\n\nCLNRM prioritizes speed over isolation:\n- Host execution: ~300ms (no container overhead)\n- Docker execution: ~9-18s (hermetic isolation)\n\nChoose based on your needs:\n- Fast feedback loops ‚Üí CLNRM (host execution)\n- Hermetic isolation ‚Üí Testcontainers (Docker containers)\n```\n\n**Option 3: If containers are implemented in the future**\n\nOnly make performance claims **after** implementing actual Docker container support, and benchmark fairly:\n- Same test scenario\n- Same hardware\n- Same container images\n- Measure: total time including container startup\n- Report: median of 10 runs with standard deviation\n\n## Related Issues\n\n- #1 Container isolation not working - explains why performance is \"better\"\n- #2 Self-test crashes - can't verify performance claims\n\n## Additional Context\n\nDiscovered during systematic audit of README claims vs actual behavior. The \"18,000x\" claim is so extreme it triggered immediate skepticism, leading to investigation that revealed no containers are actually used.\n\n**Benchmark comparison methodology issues:**\n1. ‚ùå Comparing different features (containers vs no containers)\n2. ‚ùå No reproducible benchmark script provided\n3. ‚ùå No standard deviation or confidence intervals\n4. ‚ùå Baseline (testcontainers) behavior not verified\n5. ‚ùå Makes CLNRM seem dishonest when features don't match claims\n\n## Recommendations\n\n**Immediate:**\n- Remove or clearly qualify all \"faster than Docker\" claims\n- Add prominent note that host execution (not containers) is used\n- Update changelog to remove misleading comparisons\n\n**Future:**\n- If containers are implemented, create fair benchmarks\n- Provide reproducible benchmark scripts\n- Report performance with proper statistical analysis\n- Compare like-to-like (containers to containers, host to host)\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/3/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/3/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/2",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/2/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/2/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/2/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/2",
    "id": 3527023472,
    "node_id": "I_kwDOQCmyxs7SOhtw",
    "number": 2,
    "title": "Self-test feature crashes with 'not implemented' panic",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T17:56:59Z",
    "updated_at": "2025-10-17T17:56:59Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Self-test feature crashes with \"not implemented\" panic\n\n## Summary\n\nThe `clnrm self-test` command, which is advertised as a core feature for \"Framework validates itself across 5 test suites\", crashes with a panic stating the feature is not implemented. This contradicts the README which shows example output of passing tests.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source with `cargo build --release`\n\n## Steps to Reproduce\n\n```bash\nclnrm self-test\n```\n\n## Expected Behavior\n\nBased on the README documentation:\n\n```\n$ clnrm self-test\nFramework Self-Test Results:\nTotal Tests: 5\nPassed: 5\nFailed: 0\n‚úÖ All framework functionality validated\n```\n\nThe README states:\n- \"Framework Self-Tests Work\"\n- \"clnrm self-test - Framework validates itself across 5 test suites (framework, container, plugin, cli, otel)\"\n\n## Actual Behavior\n\n```\n$ clnrm self-test\n\nthread 'main' panicked at 'not implemented: Framework self-test not implemented in v1.0', clnrm-core/src/cli/commands/self_test.rs:42:9\nnote: run with `RUST_BACKTRACE=1` for more information\n```\n\n## Impact\n\n**Critical** - This is a major credibility issue:\n\n1. ‚ùå README shows fabricated output for a feature that doesn't exist\n2. ‚ùå Self-testing is fundamental to dogfooding - framework can't validate itself\n3. ‚ùå Users cannot verify CLNRM installation is working correctly\n4. ‚ùå Contradicts CLNRM's own philosophy about proving execution with evidence\n5. ‚ùå The panic message explicitly says \"not implemented in v1.0\"\n\n## Documentation Issues\n\nThe README contains an entire section showing this feature working:\n\n```markdown\n### **Framework Self-Tests Work**\n\\`\\`\\`bash\n$ clnrm self-test\nFramework Self-Test Results:\nTotal Tests: 5\nPassed: 5\nFailed: 0\n‚úÖ All framework functionality validated\n\\`\\`\\`\n```\n\nThis appears to be **fabricated output** for a feature that was never implemented.\n\n## Why This Matters\n\nCLNRM's core philosophy is about **proving execution** and **eliminating false positives**. The framework itself has a false positive - claiming to self-test when it doesn't.\n\nFrom CLNRM's own documentation:\n> \"Tests must PROVE they executed by generating telemetry\"\n> \"The Problem: Tests that report 'PASS' but never actually executed code\"\n> \"The Solution: OTEL-first validation with 7 independent detection layers\"\n\nThe self-test feature reports in the README but crashes in reality - this is exactly the type of false positive CLNRM claims to prevent!\n\n## Suggested Fixes\n\n**Option 1: Implement the feature**\n- Actually implement the 5 test suites mentioned in docs\n- Test framework, container, plugin, cli, and otel functionality\n- Make it part of CI/CD to ensure dogfooding\n\n**Option 2: Remove from docs**\n- Remove all self-test claims from README\n- Remove the fabricated output example\n- Update command help text\n- Add to roadmap as future feature\n\n**Option 3: Provide basic implementation**\n- At minimum, run `clnrm validate` on example files\n- Run `clnrm dry-run` on test fixtures\n- Verify plugins can be loaded\n- Report real results (not fabricated)\n\n## Related Issues\n\n- #1 Container isolation not working - discovered while trying to use self-test to validate installation\n\n## Additional Context\n\nThis issue was discovered during systematic testing of all CLNRM README claims. The self-test failure is particularly concerning because:\n\n1. It's a **dogfooding failure** - framework should test itself\n2. It's documented with **fake output** - shows results that never happened\n3. The **panic message is explicit** - \"not implemented in v1.0\"\n4. It violates CLNRM's **own principles** about proof of execution\n\n## Logs\n\nFull error with backtrace:\n\n```\n$ RUST_BACKTRACE=1 clnrm self-test\n\nthread 'main' panicked at 'not implemented: Framework self-test not implemented in v1.0', clnrm-core/src/cli/commands/self_test.rs:42:9\nstack backtrace:\n[...]\n```\n\nThe source file `clnrm-core/src/cli/commands/self_test.rs:42` contains:\n```rust\npanic!(\"not implemented: Framework self-test not implemented in v1.0\")\n```\n\nThis is an intentional panic for an unimplemented feature, not a bug in existing code.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/2/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/2/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1",
    "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
    "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/labels{/name}",
    "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/comments",
    "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/events",
    "html_url": "https://github.com/seanchatmangpt/clnrm/issues/1",
    "id": 3526966226,
    "node_id": "I_kwDOQCmyxs7SOTvS",
    "number": 1,
    "title": "Container isolation not working - commands run on host instead of in Docker containers",
    "user": {
      "login": "seanchatmangpt",
      "id": 136349053,
      "node_id": "U_kgDOCCCFfQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchatmangpt",
      "html_url": "https://github.com/seanchatmangpt",
      "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
      "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
      "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
      "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 9463217756,
        "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
        "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
        "name": "bug",
        "color": "d73a4a",
        "default": true,
        "description": "Something isn't working"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-10-17T17:34:14Z",
    "updated_at": "2025-10-17T17:34:14Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "issue_dependencies_summary": {
      "blocked_by": 0,
      "total_blocked_by": 0,
      "blocking": 0,
      "total_blocking": 0
    },
    "body": "# Container Isolation Not Working - Commands Run on Host Instead of in Docker Containers\n\n## Summary\n\nCLNRM v1.0.0 claims to provide \"hermetic integration testing with container-based isolation\" but tests are actually running directly on the host system, not inside Docker containers. This is a critical false positive that undermines the core value proposition of the framework.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0 (built from source, commit from 2025-10-17)\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Docker:** Docker Desktop installed and running\n- **Installation:** Built with `cargo build --release`\n\n## Steps to Reproduce\n\n1. Create a test configuration that uses an Alpine Linux container:\n\n```toml\n# tests/container_proof.clnrm.toml\n[test.metadata]\nname = \"container_proof_test\"\ndescription = \"Prove we're actually in a container\"\n\n[services.test_container]\ntype = \"generic_container\"\nplugin = \"generic_container\"\nimage = \"alpine:latest\"\n\n[[steps]]\nname = \"check_os\"\ncommand = [\"uname\", \"-a\"]\nexpected_output_regex = \"Linux\"\n```\n\n2. Run the test:\n```bash\nclnrm run tests/container_proof.clnrm.toml\n```\n\n## Expected Behavior\n\n- Docker should pull the `alpine:latest` image (if not present)\n- Docker should create and start a container from that image\n- Commands should execute **inside the Alpine container**\n- `uname -a` should show **Linux** (Alpine's kernel)\n- `/etc/os-release` should exist and contain Alpine Linux information\n\n## Actual Behavior\n\n**Test claims success but runs on host:**\n\n1. **Service appears to start:**\n   ```\n   ‚úÖ Service 'test_container' started successfully (handle: fcfcc134-6d2a-4b7a-8303-b7b6a92e4b37)\n   ```\n\n2. **But commands run on macOS host:**\n   ```\n   üì§ Output: Darwin Mac.lan 24.5.0 Darwin Kernel Version 24.5.0\n   ```\n\n3. **No Docker containers created:**\n   ```bash\n   $ docker ps -a --filter \"name=clnrm\"\n   CONTAINER ID   IMAGE     STATUS    NAMES\n   # Empty - no containers!\n   ```\n\n4. **Alpine-specific files don't exist:**\n   ```\n   $ clnrm run tests/check-os-release.clnrm.toml\n   ‚ö†Ô∏è  Stderr: cat: /etc/os-release: No such file or directory\n   ```\n   (This file exists in all Linux containers but not on macOS)\n\n## Evidence\n\n### Test Configuration\n```toml\n[test.metadata]\nname = \"basic_test\"\n\n[services.test_container]\ntype = \"generic_container\"\nplugin = \"generic_container\"\nimage = \"alpine:latest\"\n\n[[steps]]\nname = \"verify_environment\"\ncommand = [\"sh\", \"-c\", \"echo 'Test environment ready' && uname -a\"]\nexpected_output_regex = \"Test environment ready\"\n```\n\n### Output Showing macOS Execution\n```\nüîß Executing: sh -c echo 'Test environment ready' && uname -a\nüì§ Output: Test environment ready\nDarwin Mac.lan 24.5.0 Darwin Kernel Version 24.5.0: Tue Apr 22 19:52:00 PDT 2025; root:xnu-11417.121.6~2/RELEASE_ARM64_T6031 arm64\n‚úÖ Output matches expected regex\n‚úÖ Step 'verify_environment' completed successfully\n```\n\nThis is **macOS (Darwin)**, not Alpine Linux!\n\n## Impact\n\n**Critical** - This breaks the core functionality of CLNRM:\n\n1. ‚ùå Tests claim to be \"hermetic\" but share host state\n2. ‚ùå Tests claim to run in \"isolated containers\" but run on host\n3. ‚ùå No actual container isolation - defeats the purpose\n4. ‚ùå False sense of security - tests pass but don't prove isolation\n5. ‚ùå Can't test containerized services (databases, etc.)\n\nThis is exactly the type of \"false positive\" that CLNRM is supposed to prevent with its OTEL-based validation.\n\n## What Works\n\n- ‚úÖ TOML parsing and validation\n- ‚úÖ Service plugin registration\n- ‚úÖ Test orchestration and reporting\n- ‚úÖ Command execution (on host)\n- ‚úÖ Output validation with regex\n\n## What Doesn't Work\n\n- ‚ùå Docker container creation\n- ‚ùå Docker container execution\n- ‚ùå Container isolation\n- ‚ùå Hermetic testing\n- ‚ùå Service lifecycle (start/stop containers)\n\n## Workaround\n\nNone - this is core functionality. Without container isolation, CLNRM cannot provide its promised value proposition.\n\n## Additional Context\n\nLooking at the logs, CLNRM appears to:\n1. Parse the service configuration correctly\n2. Register the plugin successfully\n3. Claim to start the service\n4. **Skip actual Docker container creation**\n5. Execute commands directly on the host\n6. Report success\n\nThe `generic_container` plugin may be a mock/stub implementation that doesn't actually create containers.\n\n## Logs\n\nFull output with `-vvv` verbosity:\n```\n[2025-10-17T17:13:56.703894Z INFO clnrm_core::cli::commands::run::services] üì¶ Registered service plugin: test_container\n[2025-10-17T17:13:56.971534Z INFO clnrm_core::cli::commands::run::services] ‚úÖ Service 'test_container' started successfully (handle: fcfcc134-6d2a-4b7a-8303-b7b6a92e4b37)\n[2025-10-17T17:13:56.978218Z INFO clnrm_core::cli::commands::run::single] üîß Executing: echo Hello from cleanroom v1.0!\n[2025-10-17T17:13:56.978249Z INFO clnrm_core::cli::commands::run::single] ‚úÖ Output matches expected regex\n```\n\nNotice: No Docker logs, no container creation, no image pulling.\n\n## Expected Fix\n\nThe `generic_container` plugin should:\n1. Use Docker API or CLI to create containers\n2. Execute commands inside containers using `docker exec`\n3. Report actual Docker errors if container creation fails\n4. Clean up containers after test completion\n5. Actually provide hermetic isolation\n\n## Related\n\nThis may be related to the experimental \"CleanroomCore\" implementation mentioned in the documentation. Perhaps the production plugin is not yet implemented?\n\n---\n\n**Note:** I discovered this while testing CLNRM v1.0.0 for production readiness. I was specifically looking for false positives in my existing Rust test suite, and ironically found that CLNRM itself has a major false positive - claiming container isolation when running on the host.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
