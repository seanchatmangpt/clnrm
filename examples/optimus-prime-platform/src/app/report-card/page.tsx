'use client';

import { useState } from 'react';
import type { ReportCard } from '@/lib/report-card-schema';

export default function ReportCardPage() {
  const [studentName, setStudentName] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [reportCard, setReportCard] = useState<ReportCard | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Sample conversation history for demo
  const sampleConversation = [
    {
      role: 'user' as const,
      content: 'I helped my little brother with his homework today',
      virtue: 'teamwork',
      timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    },
    {
      role: 'assistant' as const,
      content: 'Your compassion and patience shine brightly, young one.',
      timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    },
    {
      role: 'user' as const,
      content: 'I stood up to a bully who was picking on someone',
      virtue: 'courage',
      timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    },
    {
      role: 'assistant' as const,
      content: 'True courage is standing up for those who cannot stand for themselves.',
      timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    },
    {
      role: 'user' as const,
      content: 'I told the truth even though I was scared',
      virtue: 'honesty',
      timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
    },
    {
      role: 'assistant' as const,
      content: 'Honesty, especially in the face of fear, is the mark of true character.',
      timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
    },
  ];

  const generateReportCard = async () => {
    if (!studentName.trim()) {
      setError('Please enter a student name');
      return;
    }

    setIsGenerating(true);
    setError(null);
    setReportCard(null);

    try {
      const response = await fetch('/api/report-card', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          studentName: studentName.trim(),
          conversationHistory: sampleConversation,
          period: 'Week of October 16, 2025',
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate report card');
      }

      // Read NDJSON stream
      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      let lastValidObject: ReportCard | null = null;

      if (reader) {
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = decoder.decode(value);
          const lines = chunk.split('\n').filter(line => line.trim());

          for (const line of lines) {
            try {
              const partial = JSON.parse(line);
              lastValidObject = partial as ReportCard;
              setReportCard(partial as ReportCard);
            } catch (e) {
              console.error('Failed to parse chunk:', e);
            }
          }
        }
      }

      if (!lastValidObject) {
        throw new Error('No valid report card data received');
      }

    } catch (err) {
      console.error('Report card generation error:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate report card');
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadPDF = async () => {
    if (!reportCard) return;

    try {
      const response = await fetch('/api/report-card/pdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(reportCard),
      });

      if (!response.ok) {
        throw new Error('Failed to generate PDF');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `report-card-${studentName.replace(/\s+/g, '-')}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error('PDF download error:', err);
      setError('Failed to download PDF');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold text-indigo-900 mb-2">
          Virtue Achievement Report Card
        </h1>
        <p className="text-gray-600 mb-8">
          AI-powered report cards generated by Optimus Prime
        </p>

        {/* Input Section */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Student Name
          </label>
          <div className="flex gap-4">
            <input
              type="text"
              value={studentName}
              onChange={(e) => setStudentName(e.target.value)}
              placeholder="Enter student name..."
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              disabled={isGenerating}
            />
            <button
              onClick={generateReportCard}
              disabled={isGenerating}
              className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isGenerating ? 'Generating...' : 'Generate Report Card'}
            </button>
          </div>
          {error && (
            <p className="mt-2 text-sm text-red-600">{error}</p>
          )}
        </div>

        {/* Report Card Preview */}
        {reportCard && (
          <div className="bg-white rounded-lg shadow-lg p-8">
            <div className="flex justify-between items-start mb-6">
              <div>
                <h2 className="text-2xl font-bold text-indigo-900 mb-1">
                  {reportCard.studentName}
                </h2>
                <p className="text-gray-600">{reportCard.period}</p>
              </div>
              <button
                onClick={downloadPDF}
                className="px-4 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition-colors"
              >
                Download PDF
              </button>
            </div>

            {/* Overall Score */}
            <div className="text-center py-6 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg mb-6">
              <div className="text-5xl font-bold text-green-600 mb-2">
                {reportCard.overallScore}/100
              </div>
              <div className="text-gray-600">Overall Virtue Score</div>
            </div>

            {/* Virtue Assessment */}
            <div className="mb-6">
              <h3 className="text-xl font-bold text-indigo-900 mb-4">
                Virtue Assessment
              </h3>
              <div className="space-y-4">
                {Object.entries(reportCard.virtueAssessment).map(([virtue, assessment]) => (
                  <div key={virtue} className="bg-gray-50 p-4 rounded-lg">
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-semibold text-gray-700 uppercase text-sm">
                        {virtue}
                      </span>
                      <span className="text-2xl font-bold text-indigo-600">
                        {assessment.score}/100
                      </span>
                    </div>
                    {assessment.examples.length > 0 && (
                      <p className="text-sm text-gray-600 mb-2">
                        <strong>Examples:</strong> {assessment.examples.join('; ')}
                      </p>
                    )}
                    <p className="text-sm italic text-gray-700">
                      "{assessment.feedback}"
                    </p>
                  </div>
                ))}
              </div>
            </div>

            {/* Strengths and Growth */}
            <div className="grid md:grid-cols-2 gap-6 mb-6">
              <div>
                <h3 className="text-lg font-bold text-indigo-900 mb-3">
                  Areas of Strength
                </h3>
                <ul className="space-y-2">
                  {reportCard.areasOfStrength.map((strength, idx) => (
                    <li key={idx} className="flex items-start">
                      <span className="text-green-500 mr-2">✓</span>
                      <span className="text-gray-700">{strength}</span>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h3 className="text-lg font-bold text-indigo-900 mb-3">
                  Areas for Growth
                </h3>
                <ul className="space-y-2">
                  {reportCard.areasForGrowth.map((area, idx) => (
                    <li key={idx} className="flex items-start">
                      <span className="text-blue-500 mr-2">→</span>
                      <span className="text-gray-700">{area}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>

            {/* Optimus Prime Message */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border-l-4 border-indigo-600">
              <h3 className="text-lg font-bold text-indigo-900 mb-3">
                Message from Optimus Prime
              </h3>
              <p className="text-gray-700 italic leading-relaxed">
                {reportCard.optimusPrimeMessage}
              </p>
            </div>

            {/* Badges */}
            {reportCard.badges && reportCard.badges.length > 0 && (
              <div className="mt-6">
                <h3 className="text-lg font-bold text-indigo-900 mb-3">
                  Badges Earned
                </h3>
                <div className="flex flex-wrap gap-3">
                  {reportCard.badges.map((badge, idx) => (
                    <div
                      key={idx}
                      className="bg-yellow-50 border-2 border-yellow-400 px-4 py-2 rounded-full"
                    >
                      <span className="font-semibold text-yellow-800">
                        🏆 {badge.name}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
