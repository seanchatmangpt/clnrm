[test.metadata]
name = "child_mode_optimus_prime_test"
description = "Comprehensive test of child mode Optimus Prime chat with virtue detection and rewards"
timeout = "240s"
tags = ["child-mode", "virtues", "rewards", "ab-testing"]
version = "1.0.0"

# Service: Ollama AI for LLM generation
[services.ollama_ai]
type = "generic_container"
plugin = "ollama"
image = "ollama/ollama:latest"
ports = ["11434:11434"]
healthcheck = { command = ["ollama", "list"], interval = "10s", timeout = "5s", retries = 5 }
volumes = ["/tmp/ollama:/root/.ollama"]

# Service: Next.js application server
[services.nextjs_app]
type = "generic_container"
plugin = "generic"
image = "node:18-alpine"
working_dir = "/app"
command = ["sh", "-c", "npm install && npm run dev"]
ports = ["3000:3000"]
environment = { NODE_ENV = "development", NEXT_PUBLIC_OLLAMA_URL = "http://ollama_ai:11434" }
volumes = ["${PWD}:/app"]
depends_on = ["ollama_ai"]
healthcheck = { command = ["wget", "-q", "--spider", "http://localhost:3000"], interval = "10s", timeout = "5s", retries = 10 }

# Step 1: Wait for Ollama
[[steps]]
name = "wait_for_ollama"
command = ["sh", "-c", "sleep 5 && curl -f http://ollama_ai:11434/api/version"]
timeout = "60s"
expected_output_regex = "version"
retry_on_failure = true
max_retries = 5

# Step 2: Pull AI model
[[steps]]
name = "pull_model"
command = ["sh", "-c", "curl -X POST http://ollama_ai:11434/api/pull -d '{\"name\":\"qwen3-coder:30b\"}'"]
timeout = "300s"
expected_output_regex = "success|completed"
retry_on_failure = true

# Step 3: Wait for Next.js
[[steps]]
name = "wait_for_nextjs"
command = ["sh", "-c", "sleep 10 && curl -f http://nextjs_app:3000"]
timeout = "120s"
expected_output_regex = "."
retry_on_failure = true
max_retries = 10

# Step 4: Test virtue detection - Courage
[[steps]]
name = "test_virtue_courage"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I was brave and stood up for what was right!\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Virtue.*courage|brave|stand.*right"
retry_on_failure = false

# Step 5: Test virtue detection - Teamwork
[[steps]]
name = "test_virtue_teamwork"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I helped my team work together to solve a problem!\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Virtue.*teamwork|team|together"
retry_on_failure = false

# Step 6: Test virtue detection - Honesty
[[steps]]
name = "test_virtue_honesty"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I told the truth even though it was hard\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Virtue.*honesty|truth|honest"
retry_on_failure = false

# Step 7: Test virtue detection - Compassion
[[steps]]
name = "test_virtue_compassion"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I helped someone who was feeling sad today\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Virtue.*compassion|help|kind"
retry_on_failure = false

# Step 8: Test virtue detection - Wisdom
[[steps]]
name = "test_virtue_wisdom"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I thought carefully before making a decision\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Virtue.*wisdom|thought|decision"
retry_on_failure = false

# Step 9: Test reward URL header
[[steps]]
name = "test_reward_url_header"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I showed leadership today!\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Reward-Url.*http"
retry_on_failure = false

# Step 10: Test premium CTA headers
[[steps]]
name = "test_premium_cta_headers"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I helped others today\",\"timestamp\":1234567890}]}", "-i"]
timeout = "90s"
expected_output_regex = "X-Premium-Title|X-Premium-Link"
retry_on_failure = false

# Step 11: Test Optimus Prime response quality
[[steps]]
name = "test_optimus_response_quality"
command = ["curl", "-X", "POST", "http://nextjs_app:3000/api/chat", "-H", "Content-Type: application/json", "-d", "{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I demonstrated courage and leadership today!\",\"timestamp\":1234567890}]}"]
timeout = "90s"
expected_output_regex = "response|leadership|courage|noble|Autobot"
retry_on_failure = false

# Step 12: Test streaming response
[[steps]]
name = "test_streaming_response"
command = ["sh", "-c", "curl -X POST http://nextjs_app:3000/api/chat -H 'Content-Type: application/json' -d '{\"mode\":\"child\",\"messages\":[{\"id\":\"1\",\"role\":\"user\",\"content\":\"I was helpful today\",\"timestamp\":1234567890}]}' --no-buffer | head -c 100"]
timeout = "90s"
expected_output_regex = "response|model"
retry_on_failure = false

# Step 13: Test telemetry tracking
[[steps]]
name = "test_telemetry_tracking"
command = ["curl", "-X", "GET", "http://nextjs_app:3000/api/metrics"]
timeout = "30s"
expected_output_regex = "events|totals"
retry_on_failure = false

# Step 14: Cleanup
[[steps]]
name = "cleanup"
command = ["sh", "-c", "echo 'Child mode tests completed successfully'"]
timeout = "10s"
expected_output_regex = "completed"
retry_on_failure = false

[test.assertions]
all_steps_must_pass = true
require_service_health = true
minimum_success_rate = 0.9

[test.cleanup]
remove_volumes = true
remove_networks = true
force_cleanup = true
