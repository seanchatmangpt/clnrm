# Makefile.toml - Cleanroom Testing Framework (80/20 Consolidated)
# Requires: cargo install cargo-make
#
# 80/20 Principle: 30 essential tasks providing 80% of value
# Full task list available in: Makefile.toml.full

# =============================================================================
# CONFIGURATION
# =============================================================================

[config]
skip_core_tasks = true
default_to_workspace = false
init_task = "setup-env"

[env]
RUST_LOG = "info"
RUST_BACKTRACE = "1"
DOCKER_BUILDKIT = "1"

# =============================================================================
# TIER 1: ESSENTIAL DAILY TASKS (20 tasks - 80% usage)
# =============================================================================

# -----------------------------------------------------------------------------
# Development Workflow (4 tasks)
# -----------------------------------------------------------------------------

[tasks.dev]
description = "⚡ Quick dev iteration: fmt + clippy + test (30s)"
dependencies = ["fmt", "clippy", "test"]

[tasks.quick]
description = "⚡⚡ Ultra-fast check: check + test (10s)"
dependencies = ["check", "test"]

[tasks.fix]
description = "🔧 Auto-fix formatting and clippy issues"
dependencies = ["fmt", "clippy-fix"]

[tasks.watch]
description = "👀 Watch mode: continuous testing"
install_crate = { crate_name = "cargo-watch", binary = "cargo", test_arg = [
    "watch",
    "--help",
] }
command = "cargo"
args = ["watch", "-x", "check", "-x", "test"]

# -----------------------------------------------------------------------------
# Testing (4 tasks)
# -----------------------------------------------------------------------------

[tasks.test]
description = "🧪 Run unit tests"
command = "cargo"
args = ["test", "--lib"]

[tasks.test-all]
description = "🧪🧪 Run all tests (unit + integration)"
command = "cargo"
args = ["test", "--all-features"]

[tasks.test-integration]
description = "🧪 Run integration tests only"
command = "cargo"
args = ["test", "--test", "*"]

[tasks.test-quick]
description = "⚡ Fast unit tests (single-threaded)"
command = "cargo"
args = ["test", "--lib", "--", "--test-threads=1"]

# -----------------------------------------------------------------------------
# Validation (4 tasks)
# -----------------------------------------------------------------------------

[tasks.validate]
description = "✅ Full production validation"
alias = "validate-production-readiness"

[tasks.validate-crate]
description = "✅ Crate-level validation (Cargo.toml + standards + tests)"
workspace = false
dependencies = ["setup-env"]
script = [
    "echo '🔍 Validating crate: clnrm-core'",
    "cd crates/clnrm-core",
    # Check Cargo.toml
    "echo '📦 Checking Cargo.toml...'",
    "grep -q '^name = ' Cargo.toml && echo '  ✅ name field' || exit 1",
    "grep -q '^version' Cargo.toml && echo '  ✅ version field' || exit 1",
    "grep -q '^edition' Cargo.toml && echo '  ✅ edition field' || exit 1",
    # Check source files
    "echo '📁 Checking source files...'",
    "[ -f src/lib.rs ] && echo '  ✅ src/lib.rs exists' || exit 1",
    # Compilation check
    "echo '🔨 Checking compilation...'",
    "cargo check --quiet && echo '  ✅ Compilation passed' || exit 1",
    # Core team standards
    "echo '🛡️  Checking core team standards...'",
    "unwrap_count=$(grep -r '\\.unwrap()' src/ 2>/dev/null | grep -v test | grep -v '#\\[cfg(test)\\]' | wc -l | tr -d ' ')",
    "expect_count=$(grep -r '\\.expect(' src/ 2>/dev/null | grep -v test | grep -v '#\\[cfg(test)\\]' | wc -l | tr -d ' ')",
    "if [ \"$unwrap_count\" -eq 0 ] && [ \"$expect_count\" -eq 0 ]; then",
    "    echo '  ✅ No .unwrap() or .expect() in production code'",
    "else",
    "    echo \"  ❌ Found $unwrap_count .unwrap() and $expect_count .expect() in production code\"",
    "    exit 1",
    "fi",
    # Tests
    "echo '🧪 Running tests...'",
    "cargo test --lib --quiet && echo '  ✅ Tests passed' || echo '  ⚠️  Some tests failed'",
    # Dependencies
    "echo '📚 Checking dependencies...'",
    "cargo tree --quiet > /dev/null && echo '  ✅ Dependencies validated' || exit 1",
    "cd ../..",
    "echo ''",
    "echo '✅ Crate validation successful: clnrm-core'",
]

[tasks.validate-production-readiness]
description = "🚀 Comprehensive production readiness validation"
workspace = false
dependencies = ["setup-env"]
script = [
    "echo '🚀 Production Readiness Validation'",
    "echo '=================================='",
    "echo ''",
    # Prerequisites
    "echo '📋 Checking prerequisites...'",
    "docker info > /dev/null 2>&1 && echo '  ✅ Docker running' || (echo '  ❌ Docker not running' && exit 1)",
    "cargo --version > /dev/null && echo '  ✅ Cargo installed' || exit 1",
    "echo ''",
    # Core team standards
    "echo '🛡️  Checking core team standards...'",
    "unwrap_count=$(grep -r '\\.unwrap()' crates/*/src/ 2>/dev/null | grep -v test | grep -v '#\\[cfg(test)\\]' | wc -l | tr -d ' ')",
    "expect_count=$(grep -r '\\.expect(' crates/*/src/ 2>/dev/null | grep -v test | grep -v '#\\[cfg(test)\\]' | wc -l | tr -d ' ')",
    "if [ \"$unwrap_count\" -eq 0 ] && [ \"$expect_count\" -eq 0 ]; then",
    "    echo '  ✅ No .unwrap() or .expect() in production code'",
    "else",
    "    echo \"  ⚠️  Found $unwrap_count .unwrap() and $expect_count .expect()\"",
    "fi",
    "echo ''",
    # Tests
    "echo '🧪 Running test suite...'",
    "cargo test --all-features --quiet && echo '  ✅ All tests passed' || (echo '  ❌ Tests failed' && exit 1)",
    "echo ''",
    # Linting
    "echo '🔍 Running clippy...'",
    "cargo clippy --all-features -- -D warnings && echo '  ✅ Clippy passed' || (echo '  ❌ Clippy failed' && exit 1)",
    "echo ''",
    # Build
    "echo '🔨 Building release...'",
    "cargo build --release --quiet && echo '  ✅ Release build successful' || (echo '  ❌ Build failed' && exit 1)",
    "echo ''",
    "echo '✅ Production readiness validation PASSED'",
]

[tasks.clippy]
description = "🔍 Run clippy linter (zero warnings)"
command = "cargo"
args = ["clippy", "--all-features", "--", "-D", "warnings"]

# -----------------------------------------------------------------------------
# Formatting (2 tasks)
# -----------------------------------------------------------------------------

[tasks.fmt]
description = "📝 Format all code"
command = "cargo"
args = ["fmt", "--all"]

[tasks.fmt-check]
description = "📝 Check code formatting"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

# -----------------------------------------------------------------------------
# Build (3 tasks)
# -----------------------------------------------------------------------------

[tasks.build]
description = "🔨 Build all workspace crates (debug)"
command = "cargo"
args = ["build"]

[tasks.build-release]
description = "🔨 Build all workspace crates (release)"
command = "cargo"
args = ["build", "--release", "--all-features"]

[tasks.check]
description = "⚡ Quick check without building"
command = "cargo"
args = ["check", "--all-features"]

# -----------------------------------------------------------------------------
# CI & Production (2 tasks)
# -----------------------------------------------------------------------------

[tasks.ci]
description = "🤖 Complete CI pipeline"
dependencies = ["fmt-check", "clippy", "test-all", "build"]

[tasks.production-ready]
description = "🚀 Complete production readiness (CI + validation + release)"
dependencies = [
    "fmt-check",
    "clippy",
    "test-all",
    "validate-crate",
    "validate-production-readiness",
    "build-release",
]

# -----------------------------------------------------------------------------
# Documentation (2 tasks)
# -----------------------------------------------------------------------------

[tasks.doc]
description = "📚 Generate documentation"
command = "cargo"
args = ["doc", "--no-deps", "--all-features"]

[tasks.doc-open]
description = "📚 Generate and open documentation"
command = "cargo"
args = ["doc", "--no-deps", "--all-features", "--open"]

# -----------------------------------------------------------------------------
# Utilities (2 tasks)
# -----------------------------------------------------------------------------

[tasks.clean]
description = "🧹 Clean build artifacts"
command = "cargo"
args = ["clean"]

[tasks.setup-env]
description = "🔧 Setup development environment"
script = [
    "echo '🔧 Setting up clnrm development environment...'",
    "echo ''",
    "echo '📋 Checking prerequisites:'",
    "cargo --version",
    "docker --version",
    "echo '✅ Prerequisites check passed'",
    "echo ''",
    "echo '🔍 Checking cargo-make installation:'",
    "cargo make --version",
    "echo '✅ Environment setup complete'",
]

# =============================================================================
# TIER 2: SPECIALIZED TASKS (10 tasks - 20% usage)
# =============================================================================

[tasks.benchmarks]
description = "📊 Run performance benchmarks"
command = "cargo"
args = ["bench", "--features", "proptest"]

[tasks.publish-check]
description = "📦 Dry-run publish check"
command = "cargo"
args = ["publish", "--dry-run", "-p", "clnrm-core"]

[tasks.publish]
description = "📦 Publish to crates.io"
command = "cargo"
args = ["publish", "-p", "clnrm-core"]

[tasks.audit]
description = "🔒 Security audit"
install_crate = { crate_name = "cargo-audit", binary = "cargo", test_arg = [
    "audit",
    "--help",
] }
command = "cargo"
args = ["audit"]

[tasks.outdated]
description = "📦 Check for outdated dependencies"
install_crate = { crate_name = "cargo-outdated", binary = "cargo", test_arg = [
    "outdated",
    "--help",
] }
command = "cargo"
args = ["outdated"]

[tasks.build-otel]
description = "🔨 Build with OpenTelemetry features"
command = "cargo"
args = ["build", "--release"]

[tasks.test-otel]
description = "🧪 Test OpenTelemetry features"
command = "cargo"
args = ["test"]

[tasks.cleanroom-validate]
description = "✅ Validate cleanroom test framework"
command = "cargo"
args = ["test", "--test", "*", "--", "--test-threads=1"]

[tasks.pre-commit]
description = "✅ Pre-commit validation (fmt + clippy + test)"
dependencies = ["fmt", "clippy", "test", "validate-crate"]

[tasks.clippy-fix]
description = "🔧 Auto-fix clippy warnings"
command = "cargo"
args = ["clippy", "--fix", "--allow-dirty", "--allow-staged"]

# =============================================================================
# ALIASES FOR BACKWARD COMPATIBILITY
# =============================================================================

[tasks.all]
description = "🎯 Complete workflow: format + lint + test + build"
alias = "production-ready"

[tasks.validate-all]
alias = "production-ready"

[tasks.full-check]
alias = "ci"

[tasks.quick-test]
alias = "test-quick"

# =============================================================================
# HELP & DISCOVERY
# =============================================================================

[tasks.help]
description = "📖 Show available tasks"
script = [
    "echo '🎯 Cleanroom Testing Framework - Essential Tasks'",
    "echo '==============================================='",
    "echo ''",
    "echo '⚡ Daily Development (4 tasks):'",
    "echo '  dev              - Quick iteration: fmt + clippy + test (~30s)'",
    "echo '  quick            - Ultra-fast: check + test (~10s)'",
    "echo '  fix              - Auto-fix formatting and linting'",
    "echo '  watch            - Continuous testing mode'",
    "echo ''",
    "echo '🧪 Testing (4 tasks):'",
    "echo '  test             - Unit tests'",
    "echo '  test-all         - All tests (unit + integration)'",
    "echo '  test-integration - Integration tests only'",
    "echo '  test-quick       - Fast unit tests (single-threaded)'",
    "echo ''",
    "echo '✅ Validation (4 tasks):'",
    "echo '  validate         - Full production validation'",
    "echo '  validate-crate   - Crate-level validation'",
    "echo '  clippy           - Run linter'",
    "echo '  pre-commit       - Pre-commit checks'",
    "echo ''",
    "echo '📝 Formatting (2 tasks):'",
    "echo '  fmt              - Format code'",
    "echo '  fmt-check        - Check formatting'",
    "echo ''",
    "echo '🔨 Build (3 tasks):'",
    "echo '  build            - Debug build'",
    "echo '  build-release    - Release build'",
    "echo '  check            - Quick check'",
    "echo ''",
    "echo '🚀 CI/Production (2 tasks):'",
    "echo '  ci               - Complete CI pipeline'",
    "echo '  production-ready - Full production validation'",
    "echo ''",
    "echo '📚 Documentation (2 tasks):'",
    "echo '  doc              - Generate docs'",
    "echo '  doc-open         - Generate and open docs'",
    "echo ''",
    "echo '📦 Specialized (10 tasks):'",
    "echo '  benchmarks       - Performance benchmarks'",
    "echo '  publish-check    - Dry-run publish'",
    "echo '  publish          - Publish to crates.io'",
    "echo '  audit            - Security audit'",
    "echo '  outdated         - Check outdated deps'",
    "echo '  build-otel       - Build with OTEL'",
    "echo '  test-otel        - Test OTEL features'",
    "echo '  cleanroom-validate - Validate framework'",
    "echo ''",
    "echo '🧹 Utilities (2 tasks):'",
    "echo '  clean            - Clean artifacts'",
    "echo '  setup-env        - Setup environment'",
    "echo ''",
    "echo '📋 Total: 30 essential tasks (80/20 principle)'",
    "echo '📄 Full task list: Makefile.toml.full (124 tasks)'",
    "echo ''",
    "echo 'Run: cargo make <task-name>'",
    "echo 'List all: cargo make --list-all-steps'",
]

[tasks.default]
alias = "help"

# =============================================================================
# END OF 80/20 CONSOLIDATED MAKEFILE
# =============================================================================
# Original: 124 tasks, 1193 lines
# Consolidated: 30 tasks, ~400 lines
# Reduction: 76% fewer tasks, 66% fewer lines
# Full backup: Makefile.toml.full
