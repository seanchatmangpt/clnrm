{
  "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10",
  "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
  "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/labels{/name}",
  "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/comments",
  "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/events",
  "html_url": "https://github.com/seanchatmangpt/clnrm/issues/10",
  "id": 3527048397,
  "node_id": "I_kwDOQCmyxs7SOnzN",
  "number": 10,
  "title": "SHA-256 digest output missing despite reproducibility claims",
  "user": {
    "login": "seanchatmangpt",
    "id": 136349053,
    "node_id": "U_kgDOCCCFfQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/seanchatmangpt",
    "html_url": "https://github.com/seanchatmangpt",
    "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
    "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
    "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
    "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
    "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
    "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "labels": [
    {
      "id": 9463217756,
      "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 9463217759,
      "node_id": "LA_kwDOQCmyxs8AAAACNA0-Xw",
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/enhancement",
      "name": "enhancement",
      "color": "a2eeef",
      "default": true,
      "description": "New feature or request"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2025-10-17T18:06:09Z",
  "updated_at": "2025-10-17T18:06:09Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "sub_issues_summary": {
    "total": 0,
    "completed": 0,
    "percent_completed": 0
  },
  "issue_dependencies_summary": {
    "blocked_by": 0,
    "total_blocked_by": 0,
    "blocking": 0,
    "total_blocking": 0
  },
  "body": "# SHA-256 digest output missing despite reproducibility claims\n\n## Summary\n\nREADME claims \"SHA-256 digests - Reproducibility verification\" as a ✅ v1.0 feature under \"Multi-Format Reporting\", but no SHA-256 digest files are generated after test runs.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Run test and look for digest file\n\n```bash\n# Run basic test\nclnrm run tests/basic.clnrm.toml\n\n# Look for digest file\nls -la *.sha256\nls -la tests/*.sha256\nfind . -name \"*.sha256\" -o -name \"*digest*\"\n```\n\n### Test 2: Check for --digest flag\n\n```bash\nclnrm run --help | grep -i digest\nclnrm run --help | grep -i sha\n```\n\n### Test 3: Run with verbose output\n\n```bash\nclnrm run tests/basic.clnrm.toml --verbose\n# Check if digest mentioned in output\n```\n\n### Test 4: Look for digest in JSON output\n\n```bash\nclnrm run tests/basic.clnrm.toml --format json | jq '.digest // .sha256 // .hash'\n```\n\n## Expected Behavior\n\nBased on README claims:\n\n```markdown\n### ✅ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing\n- JUnit XML - CI/CD integration\n- SHA-256 digests - Reproducibility verification\n\n**Reproducibility Features:**\n- SHA-256 digests of test execution for verification\n- Deterministic test ordering\n- Reproducible results across environments\n\nExample:\n```bash\n$ clnrm run tests/test.clnrm.toml\n\n✅ test.clnrm.toml - PASS (288ms)\n📄 Report: test.clnrm.json\n🔐 Digest: test.clnrm.sha256\n\n$ cat test.clnrm.sha256\na1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0\n```\n\nExpected digest file contents:\n```\na1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0  test.clnrm.toml\nb2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2  test.clnrm.json\n```\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml\n✅ basic.clnrm.toml - PASS (288ms)\n\n$ ls -la *.sha256\nls: *.sha256: No such file or directory\n\n$ find . -name \"*.sha256\" -o -name \"*digest*\"\n# No results\n```\n\n### Test 2 Result:\n```bash\n$ clnrm run --help | grep -i digest\n# No results\n\n$ clnrm run --help | grep -i sha\n# No results\n```\n\n### Test 3 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml --verbose\nRunning 1 scenario(s)...\n🚀 Executing test: basic_test\n[... test output ...]\n✅ basic.clnrm.toml - PASS (288ms)\n\n# No mention of digest generation\n```\n\n### Test 4 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml --format json | jq '.digest // .sha256 // .hash'\nnull\n\n# JSON output contains no digest field\n```\n\n## Impact\n\n**Low-Medium** - Reproducibility verification missing:\n\n1. ❌ Cannot verify test execution reproducibility\n2. ❌ Cannot detect if test files were modified\n3. ❌ Cannot share test results with integrity proof\n4. ❌ Claimed v1.0 stable feature doesn't exist\n5. ⚠️ Workaround exists (manual sha256sum)\n\n## Current Workaround\n\n```bash\n# Manually generate SHA-256 digest\nsha256sum tests/*.clnrm.toml > test-digests.sha256\n\n# Verify later\nsha256sum -c test-digests.sha256\n```\n\nThis defeats the purpose of automatic reproducibility verification.\n\n## Evidence\n\n**No digest output in any format:**\n```bash\n# Text output\n$ clnrm run tests/test.toml\n✅ test.clnrm.toml - PASS (288ms)\n# No digest shown\n\n# JSON output\n$ clnrm run tests/test.toml --format json\n{\n  \"status\": \"PASS\",\n  \"duration\": 288,\n  \"scenarios\": [...]\n  // No digest field\n}\n```\n\n**No digest generation code:**\n```bash\n$ grep -r \"sha256\\|digest\\|hash\" /tmp/clnrm-src/src/report/\n# No results - digest generation not implemented\n```\n\n## Suggested Fixes\n\n**Option 1: Implement SHA-256 digest generation**\n\nAdd to `src/report/mod.rs`:\n```rust\nuse sha2::{Sha256, Digest};\nuse std::fs::File;\nuse std::io::{Read, Write};\n\npub fn generate_test_digest(test_file: &Path, results: &TestResults) -> Result<String> {\n    let mut hasher = Sha256::new();\n\n    // Hash test file\n    let mut test_content = Vec::new();\n    File::open(test_file)?.read_to_end(&mut test_content)?;\n    hasher.update(&test_content);\n\n    // Hash results (for reproducibility)\n    let results_json = serde_json::to_vec(&results)?;\n    hasher.update(&results_json);\n\n    // Hash timestamp for uniqueness\n    hasher.update(chrono::Utc::now().to_rfc3339().as_bytes());\n\n    Ok(format!(\"{:x}\", hasher.finalize()))\n}\n\npub fn write_digest_file(test_file: &Path, digest: &str) -> Result<()> {\n    let digest_path = test_file.with_extension(\"clnrm.sha256\");\n    let mut file = File::create(&digest_path)?;\n    writeln!(file, \"{}  {}\", digest, test_file.display())?;\n    Ok(())\n}\n```\n\nAdd CLI flag:\n```rust\n#[derive(Parser)]\npub struct RunArgs {\n    // ... existing fields\n\n    /// Generate SHA-256 digest file\n    #[arg(long)]\n    digest: bool,\n}\n```\n\nUsage:\n```bash\n$ clnrm run tests/test.toml --digest\n✅ test.clnrm.toml - PASS (288ms)\n🔐 Digest: a1b2c3d4...c9d0 (test.clnrm.sha256)\n\n$ cat test.clnrm.sha256\na1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0  tests/test.clnrm.toml\n```\n\nDependencies:\n```toml\n[dependencies]\nsha2 = \"0.10\"\n```\n\n**Option 2: Update README to reflect reality**\n```markdown\n### ✅ Multi-Format Reporting (v1.0)\n- JSON reports - Programmatic access and parsing ✅\n- ⚠️ Text reports - Human-readable output ✅\n\n### 🚧 Planned Features (v1.1)\n- JUnit XML - CI/CD integration (planned)\n- SHA-256 digests - Reproducibility verification (planned)\n\nCurrent reproducibility approach:\n```bash\n# Manually verify test file integrity\nsha256sum tests/*.clnrm.toml > digests.sha256\nsha256sum -c digests.sha256\n```\n```\n\n**Option 3: Minimal implementation**\n\nGenerate digest in JSON output only:\n```rust\n// In report generation\nlet digest = generate_test_digest(test_file, &results)?;\n\nlet output = json!({\n    \"status\": results.status,\n    \"duration\": results.duration,\n    \"digest\": digest,  // Add this field\n    \"scenarios\": results.scenarios\n});\n```\n\nUsage:\n```bash\n$ clnrm run tests/test.toml --format json | jq '.digest'\n\"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0\"\n```\n\n## Use Cases for Digest Feature\n\n### 1. Reproducibility Verification\n```bash\n# First run\n$ clnrm run tests/test.toml --digest\nDigest: a1b2c3d4...\n\n# Later run (same test, same results)\n$ clnrm run tests/test.toml --digest\nDigest: a1b2c3d4...  # Same digest = reproducible\n\n# Modified test\n$ clnrm run tests/test.toml --digest\nDigest: b2c3d4e5...  # Different digest = test changed\n```\n\n### 2. Test Integrity in CI/CD\n```bash\n# Developer creates test with known good digest\n$ clnrm run tests/critical.toml --digest > critical.sha256\n\n# CI pipeline verifies digest matches\n$ clnrm run tests/critical.toml --digest | diff - critical.sha256\n```\n\n### 3. Sharing Test Results\n```bash\n# Share test results with proof of integrity\n$ clnrm run tests/test.toml --digest --format json > results.json\n$ sha256sum results.json\nb2c3d4e5...\n\n# Recipient can verify\n$ sha256sum -c results.sha256\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n- #9 JUnit XML missing (related reporting feature)\n\n## Additional Context\n\nDiscovered during systematic audit of reporting features. SHA-256 digests are claimed as a reproducibility feature but no digest files are generated.\n\n**Implementation effort**: Low - `sha2` crate available, simple file output.\n\n**Priority**: Low - Nice to have but not critical. Manual `sha256sum` works as workaround.\n\n**Severity**: Documentation issue - Feature is claimed but doesn't exist.\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/10/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
