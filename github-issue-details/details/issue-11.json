{
  "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11",
  "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
  "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/labels{/name}",
  "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/comments",
  "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/events",
  "html_url": "https://github.com/seanchatmangpt/clnrm/issues/11",
  "id": 3527048697,
  "node_id": "I_kwDOQCmyxs7SOn35",
  "number": 11,
  "title": "analyze command requires undocumented OTEL collector setup",
  "user": {
    "login": "seanchatmangpt",
    "id": 136349053,
    "node_id": "U_kgDOCCCFfQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/seanchatmangpt",
    "html_url": "https://github.com/seanchatmangpt",
    "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
    "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
    "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
    "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
    "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
    "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "labels": [
    {
      "id": 9463217756,
      "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    },
    {
      "id": 9463217757,
      "node_id": "LA_kwDOQCmyxs8AAAACNA0-XQ",
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/documentation",
      "name": "documentation",
      "color": "0075ca",
      "default": true,
      "description": "Improvements or additions to documentation"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2025-10-17T18:06:17Z",
  "updated_at": "2025-10-17T18:06:17Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "sub_issues_summary": {
    "total": 0,
    "completed": 0,
    "percent_completed": 0
  },
  "issue_dependencies_summary": {
    "blocked_by": 0,
    "total_blocked_by": 0,
    "blocking": 0,
    "total_blocking": 0
  },
  "body": "# `analyze` command requires undocumented OTEL collector setup\n\n## Summary\n\nREADME claims `clnrm analyze test.toml traces.json - Validate telemetry evidence` as a working command, but running it reveals it requires an OpenTelemetry collector setup that is not documented.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Installation:** Built from source\n\n## Reproduction Steps\n\n### Test 1: Try analyze command as documented\n\n```bash\nclnrm analyze tests/basic.clnrm.toml traces.json\n```\n\n### Test 2: Check help for requirements\n\n```bash\nclnrm analyze --help\n```\n\n### Test 3: Look for traces.json after test run\n\n```bash\nclnrm run tests/basic.clnrm.toml\nls -la traces.json\n```\n\n### Test 4: Try with non-existent trace file\n\n```bash\nclnrm analyze tests/basic.clnrm.toml /tmp/nonexistent.json\n```\n\n## Expected Behavior\n\nBased on README documentation:\n\n```markdown\n### ✅ Telemetry Analysis (v1.0)\n\nCommands:\n- `clnrm analyze test.toml traces.json` - Validate telemetry evidence\n- Verifies OTEL spans match expectations\n- 7-layer fake-green detection\n\nExample:\n```bash\n# Run test and capture traces\n$ clnrm run tests/test.clnrm.toml\n\n# Analyze traces\n$ clnrm analyze tests/test.clnrm.toml traces.json\n✅ All spans validated\n✅ Graph relationships correct\n✅ Temporal ordering verified\n✅ No fake-green patterns detected\n```\n\nExpected to work with traces captured during test execution.\n\n## Actual Behavior\n\n### Test 1 Result:\n```bash\n$ clnrm analyze tests/basic.clnrm.toml traces.json\n\nError: ValidationError: File not found: traces.json\n\nHint: Run tests with OTEL collector enabled to capture traces\n```\n\n### Test 2 Result:\n```bash\n$ clnrm analyze --help\n\nUsage: clnrm analyze [OPTIONS]\n\nOptions:\n  -h, --help  Print help\n\n# No mention of required setup!\n```\n\n### Test 3 Result:\n```bash\n$ clnrm run tests/basic.clnrm.toml\n✅ basic.clnrm.toml - PASS (288ms)\n\n$ ls -la traces.json\nls: traces.json: No such file or directory\n\n# No traces.json generated during test run\n```\n\n### Test 4 Result:\n```bash\n$ clnrm analyze tests/basic.clnrm.toml /tmp/nonexistent.json\n\nError: ValidationError: File not found: /tmp/nonexistent.json\n```\n\n## Impact\n\n**Medium** - Core validation feature not usable:\n\n1. ❌ Cannot validate \"fake-green detection\" (main CLNRM selling point)\n2. ❌ No documentation on OTEL collector setup\n3. ❌ Tests don't automatically generate traces\n4. ❌ Feature claimed as working but requires undocumented infrastructure\n5. ⚠️ No clear path to actually use this feature\n\n## Missing Documentation\n\nThe `analyze` command requires:\n\n1. **OpenTelemetry Collector** running and configured\n2. **OTLP exporter** in test configuration\n3. **Trace file export** from collector\n4. **Proper collector pipeline** configuration\n\nNone of this is documented in the README.\n\n## Evidence\n\n**No OTEL collector in default setup:**\n```bash\n# Check for running collector\n$ ps aux | grep otel\n# No results\n\n# Check for collector config\n$ find . -name \"*otel*config*\"\n# No results\n```\n\n**Test files don't export traces:**\n```bash\n$ grep -r \"otlp\\|exporter\\|trace\" tests/\n# No OTEL configuration in test files\n```\n\n**No setup documentation:**\n```bash\n$ grep -r \"collector\\|OTEL.*setup\" docs/ README.md\n# No setup instructions found\n```\n\n## What's Missing\n\n### 1. OTEL Collector Setup\n```yaml\n# otel-collector-config.yaml (NOT PROVIDED)\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"0.0.0.0:4318\"\n\nexporters:\n  file:\n    path: ./traces.json\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [file]\n```\n\n### 2. Test File OTEL Configuration\n```toml\n# Example test.clnrm.toml (NOT DOCUMENTED)\n[otel]\nexporter = \"otlp\"\nendpoint = \"http://localhost:4318\"\n\n[[scenario]]\nname = \"test\"\nrun = \"echo test\"\n```\n\n### 3. Collector Startup\n```bash\n# NOT DOCUMENTED\notelcol --config=otel-collector-config.yaml &\n```\n\n## Suggested Fixes\n\n**Option 1: Provide complete setup documentation**\n\nCreate `docs/OTEL_SETUP.md`:\n```markdown\n# OpenTelemetry Collector Setup for CLNRM\n\n## Prerequisites\n```bash\n# Install OTEL collector\nbrew install opentelemetry-collector\n\n# Or download binary\ncurl -L https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.91.0/otelcol_0.91.0_darwin_amd64.tar.gz | tar xz\n```\n\n## Configuration\n\n1. Create `otel-collector-config.yaml`:\n```yaml\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"0.0.0.0:4318\"\n      grpc:\n        endpoint: \"0.0.0.0:4317\"\n\nexporters:\n  file:\n    path: ./traces.json\n    format: json\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [file]\n```\n\n2. Start collector:\n```bash\notelcol --config=otel-collector-config.yaml\n```\n\n3. Configure tests:\n```toml\n[otel]\nexporter = \"otlp\"\nendpoint = \"http://localhost:4318\"\n```\n\n4. Run and analyze:\n```bash\nclnrm run tests/test.clnrm.toml\nclnrm analyze tests/test.clnrm.toml traces.json\n```\n```\n\n**Option 2: Auto-generate traces without collector**\n\nMake CLNRM capture traces internally:\n```rust\n// In test runner\npub fn run_with_trace_capture(test: &Path) -> Result<TestResults> {\n    let tracer = init_internal_tracer()?;\n\n    let results = run_test(test)?;\n\n    // Export traces to JSON\n    export_traces(\"traces.json\")?;\n\n    Ok(results)\n}\n```\n\nUsage becomes simple:\n```bash\n# Automatically generates traces.json\nclnrm run tests/test.toml\n\n# Analyze captured traces\nclnrm analyze tests/test.toml traces.json\n```\n\n**Option 3: Make collector optional**\n\n```bash\n# Works without collector (basic validation)\nclnrm analyze tests/test.toml\n\n# Works with collector (full OTEL validation)\nclnrm analyze tests/test.toml traces.json\n\n# Auto-setup mode (starts collector if not running)\nclnrm analyze tests/test.toml --auto-setup\n```\n\n**Option 4: Update README to reflect requirements**\n\n```markdown\n### ⚠️ Telemetry Analysis (Requires Setup)\n\n**Status**: Command exists but requires OpenTelemetry collector setup\n\n**Prerequisites:**\n1. Install OpenTelemetry collector\n2. Configure OTLP endpoint\n3. Export traces to JSON file\n4. See [OTEL Setup Guide](docs/OTEL_SETUP.md)\n\n**Current limitation**: Cannot use fake-green detection without OTEL infrastructure.\n\n**Planned**: Auto-capture traces without external collector (v1.1)\n```\n\n## Example Complete Workflow (If Documented)\n\n```bash\n# 1. Install OTEL collector\nbrew install opentelemetry-collector\n\n# 2. Start collector\ncat > otel-config.yaml <<EOF\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: \"0.0.0.0:4318\"\nexporters:\n  file:\n    path: ./traces.json\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [file]\nEOF\n\notelcol --config=otel-config.yaml &\n\n# 3. Configure test\ncat > test.clnrm.toml <<EOF\n[otel]\nexporter = \"otlp\"\nendpoint = \"http://localhost:4318\"\n\n[[scenario]]\nname = \"test\"\nrun = \"echo test\"\n\n[[expect.span]]\nname = \"test.execution\"\nexists = true\nEOF\n\n# 4. Run test\nclnrm run test.clnrm.toml\n\n# 5. Analyze traces\nclnrm analyze test.clnrm.toml traces.json\n✅ All spans validated\n✅ No fake-green patterns detected\n```\n\n## Related Issues\n\n- #5 Multiple claimed features are missing or non-functional\n- #4 README contains extensive false claims\n- #1 Container isolation not working (another setup issue)\n\n## Additional Context\n\nDiscovered during systematic feature testing. The `analyze` command is the core of CLNRM's \"fake-green detection\" value proposition, but it cannot be used without undocumented OTEL collector infrastructure.\n\n**Severity**: Medium - Feature exists but is unusable without setup documentation.\n\n**Root cause**: OTEL collector setup is assumed knowledge, not documented in README or quick start guide.\n\n**User impact**: Cannot use CLNRM's main differentiating feature (fake-green detection) without significant undocumented setup work.\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/11/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
