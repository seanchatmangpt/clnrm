{
  "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1",
  "repository_url": "https://api.github.com/repos/seanchatmangpt/clnrm",
  "labels_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/labels{/name}",
  "comments_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/comments",
  "events_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/events",
  "html_url": "https://github.com/seanchatmangpt/clnrm/issues/1",
  "id": 3526966226,
  "node_id": "I_kwDOQCmyxs7SOTvS",
  "number": 1,
  "title": "Container isolation not working - commands run on host instead of in Docker containers",
  "user": {
    "login": "seanchatmangpt",
    "id": 136349053,
    "node_id": "U_kgDOCCCFfQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/136349053?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/seanchatmangpt",
    "html_url": "https://github.com/seanchatmangpt",
    "followers_url": "https://api.github.com/users/seanchatmangpt/followers",
    "following_url": "https://api.github.com/users/seanchatmangpt/following{/other_user}",
    "gists_url": "https://api.github.com/users/seanchatmangpt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/seanchatmangpt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/seanchatmangpt/subscriptions",
    "organizations_url": "https://api.github.com/users/seanchatmangpt/orgs",
    "repos_url": "https://api.github.com/users/seanchatmangpt/repos",
    "events_url": "https://api.github.com/users/seanchatmangpt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/seanchatmangpt/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "labels": [
    {
      "id": 9463217756,
      "node_id": "LA_kwDOQCmyxs8AAAACNA0-XA",
      "url": "https://api.github.com/repos/seanchatmangpt/clnrm/labels/bug",
      "name": "bug",
      "color": "d73a4a",
      "default": true,
      "description": "Something isn't working"
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2025-10-17T17:34:14Z",
  "updated_at": "2025-10-17T17:34:14Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "sub_issues_summary": {
    "total": 0,
    "completed": 0,
    "percent_completed": 0
  },
  "issue_dependencies_summary": {
    "blocked_by": 0,
    "total_blocked_by": 0,
    "blocking": 0,
    "total_blocking": 0
  },
  "body": "# Container Isolation Not Working - Commands Run on Host Instead of in Docker Containers\n\n## Summary\n\nCLNRM v1.0.0 claims to provide \"hermetic integration testing with container-based isolation\" but tests are actually running directly on the host system, not inside Docker containers. This is a critical false positive that undermines the core value proposition of the framework.\n\n## Environment\n\n- **CLNRM Version:** 1.0.0 (built from source, commit from 2025-10-17)\n- **OS:** macOS 14.5 (Darwin 24.5.0)\n- **Docker:** Docker Desktop installed and running\n- **Installation:** Built with `cargo build --release`\n\n## Steps to Reproduce\n\n1. Create a test configuration that uses an Alpine Linux container:\n\n```toml\n# tests/container_proof.clnrm.toml\n[test.metadata]\nname = \"container_proof_test\"\ndescription = \"Prove we're actually in a container\"\n\n[services.test_container]\ntype = \"generic_container\"\nplugin = \"generic_container\"\nimage = \"alpine:latest\"\n\n[[steps]]\nname = \"check_os\"\ncommand = [\"uname\", \"-a\"]\nexpected_output_regex = \"Linux\"\n```\n\n2. Run the test:\n```bash\nclnrm run tests/container_proof.clnrm.toml\n```\n\n## Expected Behavior\n\n- Docker should pull the `alpine:latest` image (if not present)\n- Docker should create and start a container from that image\n- Commands should execute **inside the Alpine container**\n- `uname -a` should show **Linux** (Alpine's kernel)\n- `/etc/os-release` should exist and contain Alpine Linux information\n\n## Actual Behavior\n\n**Test claims success but runs on host:**\n\n1. **Service appears to start:**\n   ```\n   ‚úÖ Service 'test_container' started successfully (handle: fcfcc134-6d2a-4b7a-8303-b7b6a92e4b37)\n   ```\n\n2. **But commands run on macOS host:**\n   ```\n   üì§ Output: Darwin Mac.lan 24.5.0 Darwin Kernel Version 24.5.0\n   ```\n\n3. **No Docker containers created:**\n   ```bash\n   $ docker ps -a --filter \"name=clnrm\"\n   CONTAINER ID   IMAGE     STATUS    NAMES\n   # Empty - no containers!\n   ```\n\n4. **Alpine-specific files don't exist:**\n   ```\n   $ clnrm run tests/check-os-release.clnrm.toml\n   ‚ö†Ô∏è  Stderr: cat: /etc/os-release: No such file or directory\n   ```\n   (This file exists in all Linux containers but not on macOS)\n\n## Evidence\n\n### Test Configuration\n```toml\n[test.metadata]\nname = \"basic_test\"\n\n[services.test_container]\ntype = \"generic_container\"\nplugin = \"generic_container\"\nimage = \"alpine:latest\"\n\n[[steps]]\nname = \"verify_environment\"\ncommand = [\"sh\", \"-c\", \"echo 'Test environment ready' && uname -a\"]\nexpected_output_regex = \"Test environment ready\"\n```\n\n### Output Showing macOS Execution\n```\nüîß Executing: sh -c echo 'Test environment ready' && uname -a\nüì§ Output: Test environment ready\nDarwin Mac.lan 24.5.0 Darwin Kernel Version 24.5.0: Tue Apr 22 19:52:00 PDT 2025; root:xnu-11417.121.6~2/RELEASE_ARM64_T6031 arm64\n‚úÖ Output matches expected regex\n‚úÖ Step 'verify_environment' completed successfully\n```\n\nThis is **macOS (Darwin)**, not Alpine Linux!\n\n## Impact\n\n**Critical** - This breaks the core functionality of CLNRM:\n\n1. ‚ùå Tests claim to be \"hermetic\" but share host state\n2. ‚ùå Tests claim to run in \"isolated containers\" but run on host\n3. ‚ùå No actual container isolation - defeats the purpose\n4. ‚ùå False sense of security - tests pass but don't prove isolation\n5. ‚ùå Can't test containerized services (databases, etc.)\n\nThis is exactly the type of \"false positive\" that CLNRM is supposed to prevent with its OTEL-based validation.\n\n## What Works\n\n- ‚úÖ TOML parsing and validation\n- ‚úÖ Service plugin registration\n- ‚úÖ Test orchestration and reporting\n- ‚úÖ Command execution (on host)\n- ‚úÖ Output validation with regex\n\n## What Doesn't Work\n\n- ‚ùå Docker container creation\n- ‚ùå Docker container execution\n- ‚ùå Container isolation\n- ‚ùå Hermetic testing\n- ‚ùå Service lifecycle (start/stop containers)\n\n## Workaround\n\nNone - this is core functionality. Without container isolation, CLNRM cannot provide its promised value proposition.\n\n## Additional Context\n\nLooking at the logs, CLNRM appears to:\n1. Parse the service configuration correctly\n2. Register the plugin successfully\n3. Claim to start the service\n4. **Skip actual Docker container creation**\n5. Execute commands directly on the host\n6. Report success\n\nThe `generic_container` plugin may be a mock/stub implementation that doesn't actually create containers.\n\n## Logs\n\nFull output with `-vvv` verbosity:\n```\n[2025-10-17T17:13:56.703894Z INFO clnrm_core::cli::commands::run::services] üì¶ Registered service plugin: test_container\n[2025-10-17T17:13:56.971534Z INFO clnrm_core::cli::commands::run::services] ‚úÖ Service 'test_container' started successfully (handle: fcfcc134-6d2a-4b7a-8303-b7b6a92e4b37)\n[2025-10-17T17:13:56.978218Z INFO clnrm_core::cli::commands::run::single] üîß Executing: echo Hello from cleanroom v1.0!\n[2025-10-17T17:13:56.978249Z INFO clnrm_core::cli::commands::run::single] ‚úÖ Output matches expected regex\n```\n\nNotice: No Docker logs, no container creation, no image pulling.\n\n## Expected Fix\n\nThe `generic_container` plugin should:\n1. Use Docker API or CLI to create containers\n2. Execute commands inside containers using `docker exec`\n3. Report actual Docker errors if container creation fails\n4. Clean up containers after test completion\n5. Actually provide hermetic isolation\n\n## Related\n\nThis may be related to the experimental \"CleanroomCore\" implementation mentioned in the documentation. Perhaps the production plugin is not yet implemented?\n\n---\n\n**Note:** I discovered this while testing CLNRM v1.0.0 for production readiness. I was specifically looking for false positives in my existing Rust test suite, and ironically found that CLNRM itself has a major false positive - claiming container isolation when running on the host.\n",
  "closed_by": null,
  "reactions": {
    "url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/seanchatmangpt/clnrm/issues/1/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
